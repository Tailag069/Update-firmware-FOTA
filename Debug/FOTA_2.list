
FOTA_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08040000  08040000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028b4  08040188  08040188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08042a3c  08042a3c  00012a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08042a54  08042a54  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08042a54  08042a54  00012a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08042a5c  08042a5c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08042a5c  08042a5c  00012a5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08042a60  08042a60  00012a60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08042a64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          0000008c  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000f4  200000f4  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008db4  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a0c  00000000  00000000  00028e4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007b8  00000000  00000000  0002a858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000710  00000000  00000000  0002b010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000200ee  00000000  00000000  0002b720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009b1d  00000000  00000000  0004b80e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c1add  00000000  00000000  0005532b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00116e08  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001de4  00000000  00000000  00116e58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08040188 <__do_global_dtors_aux>:
 8040188:	b510      	push	{r4, lr}
 804018a:	4c05      	ldr	r4, [pc, #20]	; (80401a0 <__do_global_dtors_aux+0x18>)
 804018c:	7823      	ldrb	r3, [r4, #0]
 804018e:	b933      	cbnz	r3, 804019e <__do_global_dtors_aux+0x16>
 8040190:	4b04      	ldr	r3, [pc, #16]	; (80401a4 <__do_global_dtors_aux+0x1c>)
 8040192:	b113      	cbz	r3, 804019a <__do_global_dtors_aux+0x12>
 8040194:	4804      	ldr	r0, [pc, #16]	; (80401a8 <__do_global_dtors_aux+0x20>)
 8040196:	f3af 8000 	nop.w
 804019a:	2301      	movs	r3, #1
 804019c:	7023      	strb	r3, [r4, #0]
 804019e:	bd10      	pop	{r4, pc}
 80401a0:	20000068 	.word	0x20000068
 80401a4:	00000000 	.word	0x00000000
 80401a8:	08042a24 	.word	0x08042a24

080401ac <frame_dummy>:
 80401ac:	b508      	push	{r3, lr}
 80401ae:	4b03      	ldr	r3, [pc, #12]	; (80401bc <frame_dummy+0x10>)
 80401b0:	b11b      	cbz	r3, 80401ba <frame_dummy+0xe>
 80401b2:	4903      	ldr	r1, [pc, #12]	; (80401c0 <frame_dummy+0x14>)
 80401b4:	4803      	ldr	r0, [pc, #12]	; (80401c4 <frame_dummy+0x18>)
 80401b6:	f3af 8000 	nop.w
 80401ba:	bd08      	pop	{r3, pc}
 80401bc:	00000000 	.word	0x00000000
 80401c0:	2000006c 	.word	0x2000006c
 80401c4:	08042a24 	.word	0x08042a24

080401c8 <strlen>:
 80401c8:	4603      	mov	r3, r0
 80401ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80401ce:	2a00      	cmp	r2, #0
 80401d0:	d1fb      	bne.n	80401ca <strlen+0x2>
 80401d2:	1a18      	subs	r0, r3, r0
 80401d4:	3801      	subs	r0, #1
 80401d6:	4770      	bx	lr

080401d8 <__aeabi_uldivmod>:
 80401d8:	b953      	cbnz	r3, 80401f0 <__aeabi_uldivmod+0x18>
 80401da:	b94a      	cbnz	r2, 80401f0 <__aeabi_uldivmod+0x18>
 80401dc:	2900      	cmp	r1, #0
 80401de:	bf08      	it	eq
 80401e0:	2800      	cmpeq	r0, #0
 80401e2:	bf1c      	itt	ne
 80401e4:	f04f 31ff 	movne.w	r1, #4294967295
 80401e8:	f04f 30ff 	movne.w	r0, #4294967295
 80401ec:	f000 b974 	b.w	80404d8 <__aeabi_idiv0>
 80401f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80401f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80401f8:	f000 f806 	bl	8040208 <__udivmoddi4>
 80401fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8040200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8040204:	b004      	add	sp, #16
 8040206:	4770      	bx	lr

08040208 <__udivmoddi4>:
 8040208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 804020c:	9d08      	ldr	r5, [sp, #32]
 804020e:	4604      	mov	r4, r0
 8040210:	468e      	mov	lr, r1
 8040212:	2b00      	cmp	r3, #0
 8040214:	d14d      	bne.n	80402b2 <__udivmoddi4+0xaa>
 8040216:	428a      	cmp	r2, r1
 8040218:	4694      	mov	ip, r2
 804021a:	d969      	bls.n	80402f0 <__udivmoddi4+0xe8>
 804021c:	fab2 f282 	clz	r2, r2
 8040220:	b152      	cbz	r2, 8040238 <__udivmoddi4+0x30>
 8040222:	fa01 f302 	lsl.w	r3, r1, r2
 8040226:	f1c2 0120 	rsb	r1, r2, #32
 804022a:	fa20 f101 	lsr.w	r1, r0, r1
 804022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8040232:	ea41 0e03 	orr.w	lr, r1, r3
 8040236:	4094      	lsls	r4, r2
 8040238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 804023c:	0c21      	lsrs	r1, r4, #16
 804023e:	fbbe f6f8 	udiv	r6, lr, r8
 8040242:	fa1f f78c 	uxth.w	r7, ip
 8040246:	fb08 e316 	mls	r3, r8, r6, lr
 804024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 804024e:	fb06 f107 	mul.w	r1, r6, r7
 8040252:	4299      	cmp	r1, r3
 8040254:	d90a      	bls.n	804026c <__udivmoddi4+0x64>
 8040256:	eb1c 0303 	adds.w	r3, ip, r3
 804025a:	f106 30ff 	add.w	r0, r6, #4294967295
 804025e:	f080 811f 	bcs.w	80404a0 <__udivmoddi4+0x298>
 8040262:	4299      	cmp	r1, r3
 8040264:	f240 811c 	bls.w	80404a0 <__udivmoddi4+0x298>
 8040268:	3e02      	subs	r6, #2
 804026a:	4463      	add	r3, ip
 804026c:	1a5b      	subs	r3, r3, r1
 804026e:	b2a4      	uxth	r4, r4
 8040270:	fbb3 f0f8 	udiv	r0, r3, r8
 8040274:	fb08 3310 	mls	r3, r8, r0, r3
 8040278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 804027c:	fb00 f707 	mul.w	r7, r0, r7
 8040280:	42a7      	cmp	r7, r4
 8040282:	d90a      	bls.n	804029a <__udivmoddi4+0x92>
 8040284:	eb1c 0404 	adds.w	r4, ip, r4
 8040288:	f100 33ff 	add.w	r3, r0, #4294967295
 804028c:	f080 810a 	bcs.w	80404a4 <__udivmoddi4+0x29c>
 8040290:	42a7      	cmp	r7, r4
 8040292:	f240 8107 	bls.w	80404a4 <__udivmoddi4+0x29c>
 8040296:	4464      	add	r4, ip
 8040298:	3802      	subs	r0, #2
 804029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 804029e:	1be4      	subs	r4, r4, r7
 80402a0:	2600      	movs	r6, #0
 80402a2:	b11d      	cbz	r5, 80402ac <__udivmoddi4+0xa4>
 80402a4:	40d4      	lsrs	r4, r2
 80402a6:	2300      	movs	r3, #0
 80402a8:	e9c5 4300 	strd	r4, r3, [r5]
 80402ac:	4631      	mov	r1, r6
 80402ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80402b2:	428b      	cmp	r3, r1
 80402b4:	d909      	bls.n	80402ca <__udivmoddi4+0xc2>
 80402b6:	2d00      	cmp	r5, #0
 80402b8:	f000 80ef 	beq.w	804049a <__udivmoddi4+0x292>
 80402bc:	2600      	movs	r6, #0
 80402be:	e9c5 0100 	strd	r0, r1, [r5]
 80402c2:	4630      	mov	r0, r6
 80402c4:	4631      	mov	r1, r6
 80402c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80402ca:	fab3 f683 	clz	r6, r3
 80402ce:	2e00      	cmp	r6, #0
 80402d0:	d14a      	bne.n	8040368 <__udivmoddi4+0x160>
 80402d2:	428b      	cmp	r3, r1
 80402d4:	d302      	bcc.n	80402dc <__udivmoddi4+0xd4>
 80402d6:	4282      	cmp	r2, r0
 80402d8:	f200 80f9 	bhi.w	80404ce <__udivmoddi4+0x2c6>
 80402dc:	1a84      	subs	r4, r0, r2
 80402de:	eb61 0303 	sbc.w	r3, r1, r3
 80402e2:	2001      	movs	r0, #1
 80402e4:	469e      	mov	lr, r3
 80402e6:	2d00      	cmp	r5, #0
 80402e8:	d0e0      	beq.n	80402ac <__udivmoddi4+0xa4>
 80402ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80402ee:	e7dd      	b.n	80402ac <__udivmoddi4+0xa4>
 80402f0:	b902      	cbnz	r2, 80402f4 <__udivmoddi4+0xec>
 80402f2:	deff      	udf	#255	; 0xff
 80402f4:	fab2 f282 	clz	r2, r2
 80402f8:	2a00      	cmp	r2, #0
 80402fa:	f040 8092 	bne.w	8040422 <__udivmoddi4+0x21a>
 80402fe:	eba1 010c 	sub.w	r1, r1, ip
 8040302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8040306:	fa1f fe8c 	uxth.w	lr, ip
 804030a:	2601      	movs	r6, #1
 804030c:	0c20      	lsrs	r0, r4, #16
 804030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8040312:	fb07 1113 	mls	r1, r7, r3, r1
 8040316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 804031a:	fb0e f003 	mul.w	r0, lr, r3
 804031e:	4288      	cmp	r0, r1
 8040320:	d908      	bls.n	8040334 <__udivmoddi4+0x12c>
 8040322:	eb1c 0101 	adds.w	r1, ip, r1
 8040326:	f103 38ff 	add.w	r8, r3, #4294967295
 804032a:	d202      	bcs.n	8040332 <__udivmoddi4+0x12a>
 804032c:	4288      	cmp	r0, r1
 804032e:	f200 80cb 	bhi.w	80404c8 <__udivmoddi4+0x2c0>
 8040332:	4643      	mov	r3, r8
 8040334:	1a09      	subs	r1, r1, r0
 8040336:	b2a4      	uxth	r4, r4
 8040338:	fbb1 f0f7 	udiv	r0, r1, r7
 804033c:	fb07 1110 	mls	r1, r7, r0, r1
 8040340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8040344:	fb0e fe00 	mul.w	lr, lr, r0
 8040348:	45a6      	cmp	lr, r4
 804034a:	d908      	bls.n	804035e <__udivmoddi4+0x156>
 804034c:	eb1c 0404 	adds.w	r4, ip, r4
 8040350:	f100 31ff 	add.w	r1, r0, #4294967295
 8040354:	d202      	bcs.n	804035c <__udivmoddi4+0x154>
 8040356:	45a6      	cmp	lr, r4
 8040358:	f200 80bb 	bhi.w	80404d2 <__udivmoddi4+0x2ca>
 804035c:	4608      	mov	r0, r1
 804035e:	eba4 040e 	sub.w	r4, r4, lr
 8040362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8040366:	e79c      	b.n	80402a2 <__udivmoddi4+0x9a>
 8040368:	f1c6 0720 	rsb	r7, r6, #32
 804036c:	40b3      	lsls	r3, r6
 804036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8040372:	ea4c 0c03 	orr.w	ip, ip, r3
 8040376:	fa20 f407 	lsr.w	r4, r0, r7
 804037a:	fa01 f306 	lsl.w	r3, r1, r6
 804037e:	431c      	orrs	r4, r3
 8040380:	40f9      	lsrs	r1, r7
 8040382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8040386:	fa00 f306 	lsl.w	r3, r0, r6
 804038a:	fbb1 f8f9 	udiv	r8, r1, r9
 804038e:	0c20      	lsrs	r0, r4, #16
 8040390:	fa1f fe8c 	uxth.w	lr, ip
 8040394:	fb09 1118 	mls	r1, r9, r8, r1
 8040398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 804039c:	fb08 f00e 	mul.w	r0, r8, lr
 80403a0:	4288      	cmp	r0, r1
 80403a2:	fa02 f206 	lsl.w	r2, r2, r6
 80403a6:	d90b      	bls.n	80403c0 <__udivmoddi4+0x1b8>
 80403a8:	eb1c 0101 	adds.w	r1, ip, r1
 80403ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80403b0:	f080 8088 	bcs.w	80404c4 <__udivmoddi4+0x2bc>
 80403b4:	4288      	cmp	r0, r1
 80403b6:	f240 8085 	bls.w	80404c4 <__udivmoddi4+0x2bc>
 80403ba:	f1a8 0802 	sub.w	r8, r8, #2
 80403be:	4461      	add	r1, ip
 80403c0:	1a09      	subs	r1, r1, r0
 80403c2:	b2a4      	uxth	r4, r4
 80403c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80403c8:	fb09 1110 	mls	r1, r9, r0, r1
 80403cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80403d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80403d4:	458e      	cmp	lr, r1
 80403d6:	d908      	bls.n	80403ea <__udivmoddi4+0x1e2>
 80403d8:	eb1c 0101 	adds.w	r1, ip, r1
 80403dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80403e0:	d26c      	bcs.n	80404bc <__udivmoddi4+0x2b4>
 80403e2:	458e      	cmp	lr, r1
 80403e4:	d96a      	bls.n	80404bc <__udivmoddi4+0x2b4>
 80403e6:	3802      	subs	r0, #2
 80403e8:	4461      	add	r1, ip
 80403ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80403ee:	fba0 9402 	umull	r9, r4, r0, r2
 80403f2:	eba1 010e 	sub.w	r1, r1, lr
 80403f6:	42a1      	cmp	r1, r4
 80403f8:	46c8      	mov	r8, r9
 80403fa:	46a6      	mov	lr, r4
 80403fc:	d356      	bcc.n	80404ac <__udivmoddi4+0x2a4>
 80403fe:	d053      	beq.n	80404a8 <__udivmoddi4+0x2a0>
 8040400:	b15d      	cbz	r5, 804041a <__udivmoddi4+0x212>
 8040402:	ebb3 0208 	subs.w	r2, r3, r8
 8040406:	eb61 010e 	sbc.w	r1, r1, lr
 804040a:	fa01 f707 	lsl.w	r7, r1, r7
 804040e:	fa22 f306 	lsr.w	r3, r2, r6
 8040412:	40f1      	lsrs	r1, r6
 8040414:	431f      	orrs	r7, r3
 8040416:	e9c5 7100 	strd	r7, r1, [r5]
 804041a:	2600      	movs	r6, #0
 804041c:	4631      	mov	r1, r6
 804041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8040422:	f1c2 0320 	rsb	r3, r2, #32
 8040426:	40d8      	lsrs	r0, r3
 8040428:	fa0c fc02 	lsl.w	ip, ip, r2
 804042c:	fa21 f303 	lsr.w	r3, r1, r3
 8040430:	4091      	lsls	r1, r2
 8040432:	4301      	orrs	r1, r0
 8040434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8040438:	fa1f fe8c 	uxth.w	lr, ip
 804043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8040440:	fb07 3610 	mls	r6, r7, r0, r3
 8040444:	0c0b      	lsrs	r3, r1, #16
 8040446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 804044a:	fb00 f60e 	mul.w	r6, r0, lr
 804044e:	429e      	cmp	r6, r3
 8040450:	fa04 f402 	lsl.w	r4, r4, r2
 8040454:	d908      	bls.n	8040468 <__udivmoddi4+0x260>
 8040456:	eb1c 0303 	adds.w	r3, ip, r3
 804045a:	f100 38ff 	add.w	r8, r0, #4294967295
 804045e:	d22f      	bcs.n	80404c0 <__udivmoddi4+0x2b8>
 8040460:	429e      	cmp	r6, r3
 8040462:	d92d      	bls.n	80404c0 <__udivmoddi4+0x2b8>
 8040464:	3802      	subs	r0, #2
 8040466:	4463      	add	r3, ip
 8040468:	1b9b      	subs	r3, r3, r6
 804046a:	b289      	uxth	r1, r1
 804046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8040470:	fb07 3316 	mls	r3, r7, r6, r3
 8040474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8040478:	fb06 f30e 	mul.w	r3, r6, lr
 804047c:	428b      	cmp	r3, r1
 804047e:	d908      	bls.n	8040492 <__udivmoddi4+0x28a>
 8040480:	eb1c 0101 	adds.w	r1, ip, r1
 8040484:	f106 38ff 	add.w	r8, r6, #4294967295
 8040488:	d216      	bcs.n	80404b8 <__udivmoddi4+0x2b0>
 804048a:	428b      	cmp	r3, r1
 804048c:	d914      	bls.n	80404b8 <__udivmoddi4+0x2b0>
 804048e:	3e02      	subs	r6, #2
 8040490:	4461      	add	r1, ip
 8040492:	1ac9      	subs	r1, r1, r3
 8040494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8040498:	e738      	b.n	804030c <__udivmoddi4+0x104>
 804049a:	462e      	mov	r6, r5
 804049c:	4628      	mov	r0, r5
 804049e:	e705      	b.n	80402ac <__udivmoddi4+0xa4>
 80404a0:	4606      	mov	r6, r0
 80404a2:	e6e3      	b.n	804026c <__udivmoddi4+0x64>
 80404a4:	4618      	mov	r0, r3
 80404a6:	e6f8      	b.n	804029a <__udivmoddi4+0x92>
 80404a8:	454b      	cmp	r3, r9
 80404aa:	d2a9      	bcs.n	8040400 <__udivmoddi4+0x1f8>
 80404ac:	ebb9 0802 	subs.w	r8, r9, r2
 80404b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80404b4:	3801      	subs	r0, #1
 80404b6:	e7a3      	b.n	8040400 <__udivmoddi4+0x1f8>
 80404b8:	4646      	mov	r6, r8
 80404ba:	e7ea      	b.n	8040492 <__udivmoddi4+0x28a>
 80404bc:	4620      	mov	r0, r4
 80404be:	e794      	b.n	80403ea <__udivmoddi4+0x1e2>
 80404c0:	4640      	mov	r0, r8
 80404c2:	e7d1      	b.n	8040468 <__udivmoddi4+0x260>
 80404c4:	46d0      	mov	r8, sl
 80404c6:	e77b      	b.n	80403c0 <__udivmoddi4+0x1b8>
 80404c8:	3b02      	subs	r3, #2
 80404ca:	4461      	add	r1, ip
 80404cc:	e732      	b.n	8040334 <__udivmoddi4+0x12c>
 80404ce:	4630      	mov	r0, r6
 80404d0:	e709      	b.n	80402e6 <__udivmoddi4+0xde>
 80404d2:	4464      	add	r4, ip
 80404d4:	3802      	subs	r0, #2
 80404d6:	e742      	b.n	804035e <__udivmoddi4+0x156>

080404d8 <__aeabi_idiv0>:
 80404d8:	4770      	bx	lr
 80404da:	bf00      	nop

080404dc <Flash_Erase>:

#include "Flash.h"
#include "stm32f4xx.h"


void Flash_Erase(uint32_t sector){
 80404dc:	b580      	push	{r7, lr}
 80404de:	b088      	sub	sp, #32
 80404e0:	af00      	add	r7, sp, #0
 80404e2:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Unlock();
 80404e4:	f000 fc54 	bl	8040d90 <HAL_FLASH_Unlock>
	FLASH_EraseInitTypeDef flash;
	flash.VoltageRange = VOLTAGE_RANGE_3;
 80404e8:	2302      	movs	r3, #2
 80404ea:	61fb      	str	r3, [r7, #28]
	flash.NbSectors = 1;
 80404ec:	2301      	movs	r3, #1
 80404ee:	61bb      	str	r3, [r7, #24]
	flash.Sector = sector;
 80404f0:	687b      	ldr	r3, [r7, #4]
 80404f2:	617b      	str	r3, [r7, #20]
	flash.TypeErase = FLASH_TYPEERASE_SECTORS;
 80404f4:	2300      	movs	r3, #0
 80404f6:	60fb      	str	r3, [r7, #12]
	uint32_t err=0;
 80404f8:	2300      	movs	r3, #0
 80404fa:	60bb      	str	r3, [r7, #8]
	HAL_FLASHEx_Erase(&flash,&err);
 80404fc:	f107 0208 	add.w	r2, r7, #8
 8040500:	f107 030c 	add.w	r3, r7, #12
 8040504:	4611      	mov	r1, r2
 8040506:	4618      	mov	r0, r3
 8040508:	f000 fda4 	bl	8041054 <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 804050c:	f000 fc62 	bl	8040dd4 <HAL_FLASH_Lock>
}
 8040510:	bf00      	nop
 8040512:	3720      	adds	r7, #32
 8040514:	46bd      	mov	sp, r7
 8040516:	bd80      	pop	{r7, pc}

08040518 <Flash_Write>:


void Flash_Write(uint32_t address, int value){
 8040518:	b5b0      	push	{r4, r5, r7, lr}
 804051a:	b082      	sub	sp, #8
 804051c:	af00      	add	r7, sp, #0
 804051e:	6078      	str	r0, [r7, #4]
 8040520:	6039      	str	r1, [r7, #0]
	HAL_FLASH_Unlock();
 8040522:	f000 fc35 	bl	8040d90 <HAL_FLASH_Unlock>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,  address, value);
 8040526:	683b      	ldr	r3, [r7, #0]
 8040528:	17da      	asrs	r2, r3, #31
 804052a:	461c      	mov	r4, r3
 804052c:	4615      	mov	r5, r2
 804052e:	4622      	mov	r2, r4
 8040530:	462b      	mov	r3, r5
 8040532:	6879      	ldr	r1, [r7, #4]
 8040534:	2000      	movs	r0, #0
 8040536:	f000 fbd7 	bl	8040ce8 <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 804053a:	f000 fc4b 	bl	8040dd4 <HAL_FLASH_Lock>
}
 804053e:	bf00      	nop
 8040540:	3708      	adds	r7, #8
 8040542:	46bd      	mov	sp, r7
 8040544:	bdb0      	pop	{r4, r5, r7, pc}
	...

08040548 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8040548:	b580      	push	{r7, lr}
 804054a:	b082      	sub	sp, #8
 804054c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 804054e:	f000 fa3f 	bl	80409d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8040552:	f000 f87b 	bl	804064c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8040556:	f000 f90d 	bl	8040774 <MX_GPIO_Init>
  MX_UART4_Init();
 804055a:	f000 f8e1 	bl	8040720 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart4, &Mode, strlen(Mode), 300);
 804055e:	4832      	ldr	r0, [pc, #200]	; (8040628 <main+0xe0>)
 8040560:	f7ff fe32 	bl	80401c8 <strlen>
 8040564:	4603      	mov	r3, r0
 8040566:	b29a      	uxth	r2, r3
 8040568:	f44f 7396 	mov.w	r3, #300	; 0x12c
 804056c:	492e      	ldr	r1, [pc, #184]	; (8040628 <main+0xe0>)
 804056e:	482f      	ldr	r0, [pc, #188]	; (804062c <main+0xe4>)
 8040570:	f001 fe15 	bl	804219e <HAL_UART_Transmit>
  Flash_Erase(7);
 8040574:	2007      	movs	r0, #7
 8040576:	f7ff ffb1 	bl	80404dc <Flash_Erase>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(HAL_UART_Receive(&huart4, &rxData, 1, 300)== HAL_OK){
 804057a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 804057e:	2201      	movs	r2, #1
 8040580:	492b      	ldr	r1, [pc, #172]	; (8040630 <main+0xe8>)
 8040582:	482a      	ldr	r0, [pc, #168]	; (804062c <main+0xe4>)
 8040584:	f001 fe9d 	bl	80422c2 <HAL_UART_Receive>
 8040588:	4603      	mov	r3, r0
 804058a:	2b00      	cmp	r3, #0
 804058c:	d1f5      	bne.n	804057a <main+0x32>
		  if(rxData == '1'){
 804058e:	4b28      	ldr	r3, [pc, #160]	; (8040630 <main+0xe8>)
 8040590:	781b      	ldrb	r3, [r3, #0]
 8040592:	2b31      	cmp	r3, #49	; 0x31
 8040594:	d121      	bne.n	80405da <main+0x92>
			  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8040596:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 804059a:	4826      	ldr	r0, [pc, #152]	; (8040634 <main+0xec>)
 804059c:	f001 f831 	bl	8041602 <HAL_GPIO_TogglePin>
			  HAL_UART_Transmit(&huart4, &txData, strlen(txData), 300);
 80405a0:	4825      	ldr	r0, [pc, #148]	; (8040638 <main+0xf0>)
 80405a2:	f7ff fe11 	bl	80401c8 <strlen>
 80405a6:	4603      	mov	r3, r0
 80405a8:	b29a      	uxth	r2, r3
 80405aa:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80405ae:	4922      	ldr	r1, [pc, #136]	; (8040638 <main+0xf0>)
 80405b0:	481e      	ldr	r0, [pc, #120]	; (804062c <main+0xe4>)
 80405b2:	f001 fdf4 	bl	804219e <HAL_UART_Transmit>
			  Flash_Write(ADDRESS + offset, (uint8_t)offset);
 80405b6:	4b21      	ldr	r3, [pc, #132]	; (804063c <main+0xf4>)
 80405b8:	681b      	ldr	r3, [r3, #0]
 80405ba:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80405be:	f503 23c0 	add.w	r3, r3, #393216	; 0x60000
 80405c2:	4a1e      	ldr	r2, [pc, #120]	; (804063c <main+0xf4>)
 80405c4:	6812      	ldr	r2, [r2, #0]
 80405c6:	b2d2      	uxtb	r2, r2
 80405c8:	4611      	mov	r1, r2
 80405ca:	4618      	mov	r0, r3
 80405cc:	f7ff ffa4 	bl	8040518 <Flash_Write>
			  offset++;
 80405d0:	4b1a      	ldr	r3, [pc, #104]	; (804063c <main+0xf4>)
 80405d2:	681b      	ldr	r3, [r3, #0]
 80405d4:	3301      	adds	r3, #1
 80405d6:	4a19      	ldr	r2, [pc, #100]	; (804063c <main+0xf4>)
 80405d8:	6013      	str	r3, [r2, #0]
		  }
		  if(rxData == '2'){
 80405da:	4b15      	ldr	r3, [pc, #84]	; (8040630 <main+0xe8>)
 80405dc:	781b      	ldrb	r3, [r3, #0]
 80405de:	2b32      	cmp	r3, #50	; 0x32
 80405e0:	d1cb      	bne.n	804057a <main+0x32>
			  HAL_UART_Transmit(&huart4, &back, strlen(back), 300);
 80405e2:	4817      	ldr	r0, [pc, #92]	; (8040640 <main+0xf8>)
 80405e4:	f7ff fdf0 	bl	80401c8 <strlen>
 80405e8:	4603      	mov	r3, r0
 80405ea:	b29a      	uxth	r2, r3
 80405ec:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80405f0:	4913      	ldr	r1, [pc, #76]	; (8040640 <main+0xf8>)
 80405f2:	480e      	ldr	r0, [pc, #56]	; (804062c <main+0xe4>)
 80405f4:	f001 fdd3 	bl	804219e <HAL_UART_Transmit>
			  HAL_RCC_DeInit();
 80405f8:	f001 fcb6 	bl	8041f68 <HAL_RCC_DeInit>

			     /* Clear Pending Interrupt Request, turn  off System Tick*/
			     HAL_DeInit();
 80405fc:	f000 fa0a 	bl	8040a14 <HAL_DeInit>
			  SCB->SHCSR &= ~( SCB_SHCSR_USGFAULTENA_Msk |\
 8040600:	4b10      	ldr	r3, [pc, #64]	; (8040644 <main+0xfc>)
 8040602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8040604:	4a0f      	ldr	r2, [pc, #60]	; (8040644 <main+0xfc>)
 8040606:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 804060a:	6253      	str	r3, [r2, #36]	; 0x24
			       SCB_SHCSR_BUSFAULTENA_Msk | \
			       SCB_SHCSR_MEMFAULTENA_Msk ) ;


			  pFunction app_reset_handler = (pFunction)(*(__IO uint32_t*)(0x08000000 + 4));
 804060c:	4b0e      	ldr	r3, [pc, #56]	; (8040648 <main+0x100>)
 804060e:	681b      	ldr	r3, [r3, #0]
 8040610:	607b      	str	r3, [r7, #4]
			  __set_MSP(*(__IO uint32_t*)0x08000000);
 8040612:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8040616:	681b      	ldr	r3, [r3, #0]
 8040618:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 804061a:	683b      	ldr	r3, [r7, #0]
 804061c:	f383 8808 	msr	MSP, r3
}
 8040620:	bf00      	nop
			  app_reset_handler();
 8040622:	687b      	ldr	r3, [r7, #4]
 8040624:	4798      	blx	r3
	  if(HAL_UART_Receive(&huart4, &rxData, 1, 300)== HAL_OK){
 8040626:	e7a8      	b.n	804057a <main+0x32>
 8040628:	20000000 	.word	0x20000000
 804062c:	20000084 	.word	0x20000084
 8040630:	200000c8 	.word	0x200000c8
 8040634:	40020c00 	.word	0x40020c00
 8040638:	2000002c 	.word	0x2000002c
 804063c:	200000cc 	.word	0x200000cc
 8040640:	20000048 	.word	0x20000048
 8040644:	e000ed00 	.word	0xe000ed00
 8040648:	08000004 	.word	0x08000004

0804064c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 804064c:	b580      	push	{r7, lr}
 804064e:	b094      	sub	sp, #80	; 0x50
 8040650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8040652:	f107 0320 	add.w	r3, r7, #32
 8040656:	2230      	movs	r2, #48	; 0x30
 8040658:	2100      	movs	r1, #0
 804065a:	4618      	mov	r0, r3
 804065c:	f002 f9da 	bl	8042a14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8040660:	f107 030c 	add.w	r3, r7, #12
 8040664:	2200      	movs	r2, #0
 8040666:	601a      	str	r2, [r3, #0]
 8040668:	605a      	str	r2, [r3, #4]
 804066a:	609a      	str	r2, [r3, #8]
 804066c:	60da      	str	r2, [r3, #12]
 804066e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8040670:	2300      	movs	r3, #0
 8040672:	60bb      	str	r3, [r7, #8]
 8040674:	4b28      	ldr	r3, [pc, #160]	; (8040718 <SystemClock_Config+0xcc>)
 8040676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8040678:	4a27      	ldr	r2, [pc, #156]	; (8040718 <SystemClock_Config+0xcc>)
 804067a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 804067e:	6413      	str	r3, [r2, #64]	; 0x40
 8040680:	4b25      	ldr	r3, [pc, #148]	; (8040718 <SystemClock_Config+0xcc>)
 8040682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8040684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8040688:	60bb      	str	r3, [r7, #8]
 804068a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 804068c:	2300      	movs	r3, #0
 804068e:	607b      	str	r3, [r7, #4]
 8040690:	4b22      	ldr	r3, [pc, #136]	; (804071c <SystemClock_Config+0xd0>)
 8040692:	681b      	ldr	r3, [r3, #0]
 8040694:	4a21      	ldr	r2, [pc, #132]	; (804071c <SystemClock_Config+0xd0>)
 8040696:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 804069a:	6013      	str	r3, [r2, #0]
 804069c:	4b1f      	ldr	r3, [pc, #124]	; (804071c <SystemClock_Config+0xd0>)
 804069e:	681b      	ldr	r3, [r3, #0]
 80406a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80406a4:	607b      	str	r3, [r7, #4]
 80406a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80406a8:	2301      	movs	r3, #1
 80406aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80406ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80406b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80406b2:	2302      	movs	r3, #2
 80406b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80406b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80406ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80406bc:	2304      	movs	r3, #4
 80406be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80406c0:	23a8      	movs	r3, #168	; 0xa8
 80406c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80406c4:	2302      	movs	r3, #2
 80406c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80406c8:	2304      	movs	r3, #4
 80406ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80406cc:	f107 0320 	add.w	r3, r7, #32
 80406d0:	4618      	mov	r0, r3
 80406d2:	f000 ffb1 	bl	8041638 <HAL_RCC_OscConfig>
 80406d6:	4603      	mov	r3, r0
 80406d8:	2b00      	cmp	r3, #0
 80406da:	d001      	beq.n	80406e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80406dc:	f000 f89c 	bl	8040818 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80406e0:	230f      	movs	r3, #15
 80406e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80406e4:	2302      	movs	r3, #2
 80406e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80406e8:	2300      	movs	r3, #0
 80406ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80406ec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80406f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80406f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80406f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80406f8:	f107 030c 	add.w	r3, r7, #12
 80406fc:	2105      	movs	r1, #5
 80406fe:	4618      	mov	r0, r3
 8040700:	f001 fa12 	bl	8041b28 <HAL_RCC_ClockConfig>
 8040704:	4603      	mov	r3, r0
 8040706:	2b00      	cmp	r3, #0
 8040708:	d001      	beq.n	804070e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 804070a:	f000 f885 	bl	8040818 <Error_Handler>
  }
}
 804070e:	bf00      	nop
 8040710:	3750      	adds	r7, #80	; 0x50
 8040712:	46bd      	mov	sp, r7
 8040714:	bd80      	pop	{r7, pc}
 8040716:	bf00      	nop
 8040718:	40023800 	.word	0x40023800
 804071c:	40007000 	.word	0x40007000

08040720 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8040720:	b580      	push	{r7, lr}
 8040722:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8040724:	4b11      	ldr	r3, [pc, #68]	; (804076c <MX_UART4_Init+0x4c>)
 8040726:	4a12      	ldr	r2, [pc, #72]	; (8040770 <MX_UART4_Init+0x50>)
 8040728:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 804072a:	4b10      	ldr	r3, [pc, #64]	; (804076c <MX_UART4_Init+0x4c>)
 804072c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8040730:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8040732:	4b0e      	ldr	r3, [pc, #56]	; (804076c <MX_UART4_Init+0x4c>)
 8040734:	2200      	movs	r2, #0
 8040736:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8040738:	4b0c      	ldr	r3, [pc, #48]	; (804076c <MX_UART4_Init+0x4c>)
 804073a:	2200      	movs	r2, #0
 804073c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 804073e:	4b0b      	ldr	r3, [pc, #44]	; (804076c <MX_UART4_Init+0x4c>)
 8040740:	2200      	movs	r2, #0
 8040742:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8040744:	4b09      	ldr	r3, [pc, #36]	; (804076c <MX_UART4_Init+0x4c>)
 8040746:	220c      	movs	r2, #12
 8040748:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 804074a:	4b08      	ldr	r3, [pc, #32]	; (804076c <MX_UART4_Init+0x4c>)
 804074c:	2200      	movs	r2, #0
 804074e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8040750:	4b06      	ldr	r3, [pc, #24]	; (804076c <MX_UART4_Init+0x4c>)
 8040752:	2200      	movs	r2, #0
 8040754:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8040756:	4805      	ldr	r0, [pc, #20]	; (804076c <MX_UART4_Init+0x4c>)
 8040758:	f001 fcd4 	bl	8042104 <HAL_UART_Init>
 804075c:	4603      	mov	r3, r0
 804075e:	2b00      	cmp	r3, #0
 8040760:	d001      	beq.n	8040766 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8040762:	f000 f859 	bl	8040818 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8040766:	bf00      	nop
 8040768:	bd80      	pop	{r7, pc}
 804076a:	bf00      	nop
 804076c:	20000084 	.word	0x20000084
 8040770:	40004c00 	.word	0x40004c00

08040774 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8040774:	b580      	push	{r7, lr}
 8040776:	b088      	sub	sp, #32
 8040778:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 804077a:	f107 030c 	add.w	r3, r7, #12
 804077e:	2200      	movs	r2, #0
 8040780:	601a      	str	r2, [r3, #0]
 8040782:	605a      	str	r2, [r3, #4]
 8040784:	609a      	str	r2, [r3, #8]
 8040786:	60da      	str	r2, [r3, #12]
 8040788:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 804078a:	2300      	movs	r3, #0
 804078c:	60bb      	str	r3, [r7, #8]
 804078e:	4b20      	ldr	r3, [pc, #128]	; (8040810 <MX_GPIO_Init+0x9c>)
 8040790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040792:	4a1f      	ldr	r2, [pc, #124]	; (8040810 <MX_GPIO_Init+0x9c>)
 8040794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8040798:	6313      	str	r3, [r2, #48]	; 0x30
 804079a:	4b1d      	ldr	r3, [pc, #116]	; (8040810 <MX_GPIO_Init+0x9c>)
 804079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804079e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80407a2:	60bb      	str	r3, [r7, #8]
 80407a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80407a6:	2300      	movs	r3, #0
 80407a8:	607b      	str	r3, [r7, #4]
 80407aa:	4b19      	ldr	r3, [pc, #100]	; (8040810 <MX_GPIO_Init+0x9c>)
 80407ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80407ae:	4a18      	ldr	r2, [pc, #96]	; (8040810 <MX_GPIO_Init+0x9c>)
 80407b0:	f043 0301 	orr.w	r3, r3, #1
 80407b4:	6313      	str	r3, [r2, #48]	; 0x30
 80407b6:	4b16      	ldr	r3, [pc, #88]	; (8040810 <MX_GPIO_Init+0x9c>)
 80407b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80407ba:	f003 0301 	and.w	r3, r3, #1
 80407be:	607b      	str	r3, [r7, #4]
 80407c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80407c2:	2300      	movs	r3, #0
 80407c4:	603b      	str	r3, [r7, #0]
 80407c6:	4b12      	ldr	r3, [pc, #72]	; (8040810 <MX_GPIO_Init+0x9c>)
 80407c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80407ca:	4a11      	ldr	r2, [pc, #68]	; (8040810 <MX_GPIO_Init+0x9c>)
 80407cc:	f043 0308 	orr.w	r3, r3, #8
 80407d0:	6313      	str	r3, [r2, #48]	; 0x30
 80407d2:	4b0f      	ldr	r3, [pc, #60]	; (8040810 <MX_GPIO_Init+0x9c>)
 80407d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80407d6:	f003 0308 	and.w	r3, r3, #8
 80407da:	603b      	str	r3, [r7, #0]
 80407dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80407de:	2200      	movs	r2, #0
 80407e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80407e4:	480b      	ldr	r0, [pc, #44]	; (8040814 <MX_GPIO_Init+0xa0>)
 80407e6:	f000 fef3 	bl	80415d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80407ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80407ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80407f0:	2301      	movs	r3, #1
 80407f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80407f4:	2300      	movs	r3, #0
 80407f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80407f8:	2300      	movs	r3, #0
 80407fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80407fc:	f107 030c 	add.w	r3, r7, #12
 8040800:	4619      	mov	r1, r3
 8040802:	4804      	ldr	r0, [pc, #16]	; (8040814 <MX_GPIO_Init+0xa0>)
 8040804:	f000 fd48 	bl	8041298 <HAL_GPIO_Init>

}
 8040808:	bf00      	nop
 804080a:	3720      	adds	r7, #32
 804080c:	46bd      	mov	sp, r7
 804080e:	bd80      	pop	{r7, pc}
 8040810:	40023800 	.word	0x40023800
 8040814:	40020c00 	.word	0x40020c00

08040818 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8040818:	b480      	push	{r7}
 804081a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 804081c:	b672      	cpsid	i
}
 804081e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8040820:	e7fe      	b.n	8040820 <Error_Handler+0x8>
	...

08040824 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8040824:	b480      	push	{r7}
 8040826:	b083      	sub	sp, #12
 8040828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 804082a:	2300      	movs	r3, #0
 804082c:	607b      	str	r3, [r7, #4]
 804082e:	4b10      	ldr	r3, [pc, #64]	; (8040870 <HAL_MspInit+0x4c>)
 8040830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8040832:	4a0f      	ldr	r2, [pc, #60]	; (8040870 <HAL_MspInit+0x4c>)
 8040834:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8040838:	6453      	str	r3, [r2, #68]	; 0x44
 804083a:	4b0d      	ldr	r3, [pc, #52]	; (8040870 <HAL_MspInit+0x4c>)
 804083c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804083e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8040842:	607b      	str	r3, [r7, #4]
 8040844:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8040846:	2300      	movs	r3, #0
 8040848:	603b      	str	r3, [r7, #0]
 804084a:	4b09      	ldr	r3, [pc, #36]	; (8040870 <HAL_MspInit+0x4c>)
 804084c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804084e:	4a08      	ldr	r2, [pc, #32]	; (8040870 <HAL_MspInit+0x4c>)
 8040850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8040854:	6413      	str	r3, [r2, #64]	; 0x40
 8040856:	4b06      	ldr	r3, [pc, #24]	; (8040870 <HAL_MspInit+0x4c>)
 8040858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804085a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 804085e:	603b      	str	r3, [r7, #0]
 8040860:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8040862:	bf00      	nop
 8040864:	370c      	adds	r7, #12
 8040866:	46bd      	mov	sp, r7
 8040868:	f85d 7b04 	ldr.w	r7, [sp], #4
 804086c:	4770      	bx	lr
 804086e:	bf00      	nop
 8040870:	40023800 	.word	0x40023800

08040874 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8040874:	b580      	push	{r7, lr}
 8040876:	b08a      	sub	sp, #40	; 0x28
 8040878:	af00      	add	r7, sp, #0
 804087a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 804087c:	f107 0314 	add.w	r3, r7, #20
 8040880:	2200      	movs	r2, #0
 8040882:	601a      	str	r2, [r3, #0]
 8040884:	605a      	str	r2, [r3, #4]
 8040886:	609a      	str	r2, [r3, #8]
 8040888:	60da      	str	r2, [r3, #12]
 804088a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 804088c:	687b      	ldr	r3, [r7, #4]
 804088e:	681b      	ldr	r3, [r3, #0]
 8040890:	4a19      	ldr	r2, [pc, #100]	; (80408f8 <HAL_UART_MspInit+0x84>)
 8040892:	4293      	cmp	r3, r2
 8040894:	d12b      	bne.n	80408ee <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8040896:	2300      	movs	r3, #0
 8040898:	613b      	str	r3, [r7, #16]
 804089a:	4b18      	ldr	r3, [pc, #96]	; (80408fc <HAL_UART_MspInit+0x88>)
 804089c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804089e:	4a17      	ldr	r2, [pc, #92]	; (80408fc <HAL_UART_MspInit+0x88>)
 80408a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80408a4:	6413      	str	r3, [r2, #64]	; 0x40
 80408a6:	4b15      	ldr	r3, [pc, #84]	; (80408fc <HAL_UART_MspInit+0x88>)
 80408a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80408aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80408ae:	613b      	str	r3, [r7, #16]
 80408b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80408b2:	2300      	movs	r3, #0
 80408b4:	60fb      	str	r3, [r7, #12]
 80408b6:	4b11      	ldr	r3, [pc, #68]	; (80408fc <HAL_UART_MspInit+0x88>)
 80408b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80408ba:	4a10      	ldr	r2, [pc, #64]	; (80408fc <HAL_UART_MspInit+0x88>)
 80408bc:	f043 0301 	orr.w	r3, r3, #1
 80408c0:	6313      	str	r3, [r2, #48]	; 0x30
 80408c2:	4b0e      	ldr	r3, [pc, #56]	; (80408fc <HAL_UART_MspInit+0x88>)
 80408c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80408c6:	f003 0301 	and.w	r3, r3, #1
 80408ca:	60fb      	str	r3, [r7, #12]
 80408cc:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80408ce:	2303      	movs	r3, #3
 80408d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80408d2:	2302      	movs	r3, #2
 80408d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80408d6:	2300      	movs	r3, #0
 80408d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80408da:	2303      	movs	r3, #3
 80408dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80408de:	2308      	movs	r3, #8
 80408e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80408e2:	f107 0314 	add.w	r3, r7, #20
 80408e6:	4619      	mov	r1, r3
 80408e8:	4805      	ldr	r0, [pc, #20]	; (8040900 <HAL_UART_MspInit+0x8c>)
 80408ea:	f000 fcd5 	bl	8041298 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80408ee:	bf00      	nop
 80408f0:	3728      	adds	r7, #40	; 0x28
 80408f2:	46bd      	mov	sp, r7
 80408f4:	bd80      	pop	{r7, pc}
 80408f6:	bf00      	nop
 80408f8:	40004c00 	.word	0x40004c00
 80408fc:	40023800 	.word	0x40023800
 8040900:	40020000 	.word	0x40020000

08040904 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8040904:	b480      	push	{r7}
 8040906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8040908:	e7fe      	b.n	8040908 <NMI_Handler+0x4>

0804090a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 804090a:	b480      	push	{r7}
 804090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 804090e:	e7fe      	b.n	804090e <HardFault_Handler+0x4>

08040910 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8040910:	b480      	push	{r7}
 8040912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8040914:	e7fe      	b.n	8040914 <MemManage_Handler+0x4>

08040916 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8040916:	b480      	push	{r7}
 8040918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 804091a:	e7fe      	b.n	804091a <BusFault_Handler+0x4>

0804091c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 804091c:	b480      	push	{r7}
 804091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8040920:	e7fe      	b.n	8040920 <UsageFault_Handler+0x4>

08040922 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8040922:	b480      	push	{r7}
 8040924:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8040926:	bf00      	nop
 8040928:	46bd      	mov	sp, r7
 804092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804092e:	4770      	bx	lr

08040930 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8040930:	b480      	push	{r7}
 8040932:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8040934:	bf00      	nop
 8040936:	46bd      	mov	sp, r7
 8040938:	f85d 7b04 	ldr.w	r7, [sp], #4
 804093c:	4770      	bx	lr

0804093e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 804093e:	b480      	push	{r7}
 8040940:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8040942:	bf00      	nop
 8040944:	46bd      	mov	sp, r7
 8040946:	f85d 7b04 	ldr.w	r7, [sp], #4
 804094a:	4770      	bx	lr

0804094c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 804094c:	b580      	push	{r7, lr}
 804094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8040950:	f000 f8c4 	bl	8040adc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8040954:	bf00      	nop
 8040956:	bd80      	pop	{r7, pc}

08040958 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8040958:	b480      	push	{r7}
 804095a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 804095c:	4b06      	ldr	r3, [pc, #24]	; (8040978 <SystemInit+0x20>)
 804095e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8040962:	4a05      	ldr	r2, [pc, #20]	; (8040978 <SystemInit+0x20>)
 8040964:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8040968:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 804096c:	bf00      	nop
 804096e:	46bd      	mov	sp, r7
 8040970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040974:	4770      	bx	lr
 8040976:	bf00      	nop
 8040978:	e000ed00 	.word	0xe000ed00

0804097c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 804097c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80409b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8040980:	480d      	ldr	r0, [pc, #52]	; (80409b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8040982:	490e      	ldr	r1, [pc, #56]	; (80409bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8040984:	4a0e      	ldr	r2, [pc, #56]	; (80409c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8040986:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8040988:	e002      	b.n	8040990 <LoopCopyDataInit>

0804098a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 804098a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 804098c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 804098e:	3304      	adds	r3, #4

08040990 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8040990:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8040992:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8040994:	d3f9      	bcc.n	804098a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8040996:	4a0b      	ldr	r2, [pc, #44]	; (80409c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8040998:	4c0b      	ldr	r4, [pc, #44]	; (80409c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 804099a:	2300      	movs	r3, #0
  b LoopFillZerobss
 804099c:	e001      	b.n	80409a2 <LoopFillZerobss>

0804099e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 804099e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80409a0:	3204      	adds	r2, #4

080409a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80409a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80409a4:	d3fb      	bcc.n	804099e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80409a6:	f7ff ffd7 	bl	8040958 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80409aa:	f002 f80f 	bl	80429cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80409ae:	f7ff fdcb 	bl	8040548 <main>
  bx  lr    
 80409b2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80409b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80409b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80409bc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80409c0:	08042a64 	.word	0x08042a64
  ldr r2, =_sbss
 80409c4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80409c8:	200000f4 	.word	0x200000f4

080409cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80409cc:	e7fe      	b.n	80409cc <ADC_IRQHandler>
	...

080409d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80409d0:	b580      	push	{r7, lr}
 80409d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80409d4:	4b0e      	ldr	r3, [pc, #56]	; (8040a10 <HAL_Init+0x40>)
 80409d6:	681b      	ldr	r3, [r3, #0]
 80409d8:	4a0d      	ldr	r2, [pc, #52]	; (8040a10 <HAL_Init+0x40>)
 80409da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80409de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80409e0:	4b0b      	ldr	r3, [pc, #44]	; (8040a10 <HAL_Init+0x40>)
 80409e2:	681b      	ldr	r3, [r3, #0]
 80409e4:	4a0a      	ldr	r2, [pc, #40]	; (8040a10 <HAL_Init+0x40>)
 80409e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80409ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80409ec:	4b08      	ldr	r3, [pc, #32]	; (8040a10 <HAL_Init+0x40>)
 80409ee:	681b      	ldr	r3, [r3, #0]
 80409f0:	4a07      	ldr	r2, [pc, #28]	; (8040a10 <HAL_Init+0x40>)
 80409f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80409f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80409f8:	2003      	movs	r0, #3
 80409fa:	f000 f941 	bl	8040c80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80409fe:	200f      	movs	r0, #15
 8040a00:	f000 f83c 	bl	8040a7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8040a04:	f7ff ff0e 	bl	8040824 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8040a08:	2300      	movs	r3, #0
}
 8040a0a:	4618      	mov	r0, r3
 8040a0c:	bd80      	pop	{r7, pc}
 8040a0e:	bf00      	nop
 8040a10:	40023c00 	.word	0x40023c00

08040a14 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8040a14:	b580      	push	{r7, lr}
 8040a16:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8040a18:	4b13      	ldr	r3, [pc, #76]	; (8040a68 <HAL_DeInit+0x54>)
 8040a1a:	f04f 32ff 	mov.w	r2, #4294967295
 8040a1e:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8040a20:	4b11      	ldr	r3, [pc, #68]	; (8040a68 <HAL_DeInit+0x54>)
 8040a22:	2200      	movs	r2, #0
 8040a24:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8040a26:	4b10      	ldr	r3, [pc, #64]	; (8040a68 <HAL_DeInit+0x54>)
 8040a28:	f04f 32ff 	mov.w	r2, #4294967295
 8040a2c:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8040a2e:	4b0e      	ldr	r3, [pc, #56]	; (8040a68 <HAL_DeInit+0x54>)
 8040a30:	2200      	movs	r2, #0
 8040a32:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8040a34:	4b0c      	ldr	r3, [pc, #48]	; (8040a68 <HAL_DeInit+0x54>)
 8040a36:	f04f 32ff 	mov.w	r2, #4294967295
 8040a3a:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8040a3c:	4b0a      	ldr	r3, [pc, #40]	; (8040a68 <HAL_DeInit+0x54>)
 8040a3e:	2200      	movs	r2, #0
 8040a40:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8040a42:	4b09      	ldr	r3, [pc, #36]	; (8040a68 <HAL_DeInit+0x54>)
 8040a44:	f04f 32ff 	mov.w	r2, #4294967295
 8040a48:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8040a4a:	4b07      	ldr	r3, [pc, #28]	; (8040a68 <HAL_DeInit+0x54>)
 8040a4c:	2200      	movs	r2, #0
 8040a4e:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8040a50:	4b05      	ldr	r3, [pc, #20]	; (8040a68 <HAL_DeInit+0x54>)
 8040a52:	f04f 32ff 	mov.w	r2, #4294967295
 8040a56:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8040a58:	4b03      	ldr	r3, [pc, #12]	; (8040a68 <HAL_DeInit+0x54>)
 8040a5a:	2200      	movs	r2, #0
 8040a5c:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8040a5e:	f000 f805 	bl	8040a6c <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8040a62:	2300      	movs	r3, #0
}
 8040a64:	4618      	mov	r0, r3
 8040a66:	bd80      	pop	{r7, pc}
 8040a68:	40023800 	.word	0x40023800

08040a6c <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8040a6c:	b480      	push	{r7}
 8040a6e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8040a70:	bf00      	nop
 8040a72:	46bd      	mov	sp, r7
 8040a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040a78:	4770      	bx	lr
	...

08040a7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8040a7c:	b580      	push	{r7, lr}
 8040a7e:	b082      	sub	sp, #8
 8040a80:	af00      	add	r7, sp, #0
 8040a82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8040a84:	4b12      	ldr	r3, [pc, #72]	; (8040ad0 <HAL_InitTick+0x54>)
 8040a86:	681a      	ldr	r2, [r3, #0]
 8040a88:	4b12      	ldr	r3, [pc, #72]	; (8040ad4 <HAL_InitTick+0x58>)
 8040a8a:	781b      	ldrb	r3, [r3, #0]
 8040a8c:	4619      	mov	r1, r3
 8040a8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8040a92:	fbb3 f3f1 	udiv	r3, r3, r1
 8040a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8040a9a:	4618      	mov	r0, r3
 8040a9c:	f000 f917 	bl	8040cce <HAL_SYSTICK_Config>
 8040aa0:	4603      	mov	r3, r0
 8040aa2:	2b00      	cmp	r3, #0
 8040aa4:	d001      	beq.n	8040aaa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8040aa6:	2301      	movs	r3, #1
 8040aa8:	e00e      	b.n	8040ac8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8040aaa:	687b      	ldr	r3, [r7, #4]
 8040aac:	2b0f      	cmp	r3, #15
 8040aae:	d80a      	bhi.n	8040ac6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8040ab0:	2200      	movs	r2, #0
 8040ab2:	6879      	ldr	r1, [r7, #4]
 8040ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8040ab8:	f000 f8ed 	bl	8040c96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8040abc:	4a06      	ldr	r2, [pc, #24]	; (8040ad8 <HAL_InitTick+0x5c>)
 8040abe:	687b      	ldr	r3, [r7, #4]
 8040ac0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8040ac2:	2300      	movs	r3, #0
 8040ac4:	e000      	b.n	8040ac8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8040ac6:	2301      	movs	r3, #1
}
 8040ac8:	4618      	mov	r0, r3
 8040aca:	3708      	adds	r7, #8
 8040acc:	46bd      	mov	sp, r7
 8040ace:	bd80      	pop	{r7, pc}
 8040ad0:	2000005c 	.word	0x2000005c
 8040ad4:	20000064 	.word	0x20000064
 8040ad8:	20000060 	.word	0x20000060

08040adc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8040adc:	b480      	push	{r7}
 8040ade:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8040ae0:	4b06      	ldr	r3, [pc, #24]	; (8040afc <HAL_IncTick+0x20>)
 8040ae2:	781b      	ldrb	r3, [r3, #0]
 8040ae4:	461a      	mov	r2, r3
 8040ae6:	4b06      	ldr	r3, [pc, #24]	; (8040b00 <HAL_IncTick+0x24>)
 8040ae8:	681b      	ldr	r3, [r3, #0]
 8040aea:	4413      	add	r3, r2
 8040aec:	4a04      	ldr	r2, [pc, #16]	; (8040b00 <HAL_IncTick+0x24>)
 8040aee:	6013      	str	r3, [r2, #0]
}
 8040af0:	bf00      	nop
 8040af2:	46bd      	mov	sp, r7
 8040af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040af8:	4770      	bx	lr
 8040afa:	bf00      	nop
 8040afc:	20000064 	.word	0x20000064
 8040b00:	200000d0 	.word	0x200000d0

08040b04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8040b04:	b480      	push	{r7}
 8040b06:	af00      	add	r7, sp, #0
  return uwTick;
 8040b08:	4b03      	ldr	r3, [pc, #12]	; (8040b18 <HAL_GetTick+0x14>)
 8040b0a:	681b      	ldr	r3, [r3, #0]
}
 8040b0c:	4618      	mov	r0, r3
 8040b0e:	46bd      	mov	sp, r7
 8040b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040b14:	4770      	bx	lr
 8040b16:	bf00      	nop
 8040b18:	200000d0 	.word	0x200000d0

08040b1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8040b1c:	b480      	push	{r7}
 8040b1e:	b085      	sub	sp, #20
 8040b20:	af00      	add	r7, sp, #0
 8040b22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8040b24:	687b      	ldr	r3, [r7, #4]
 8040b26:	f003 0307 	and.w	r3, r3, #7
 8040b2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8040b2c:	4b0c      	ldr	r3, [pc, #48]	; (8040b60 <__NVIC_SetPriorityGrouping+0x44>)
 8040b2e:	68db      	ldr	r3, [r3, #12]
 8040b30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8040b32:	68ba      	ldr	r2, [r7, #8]
 8040b34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8040b38:	4013      	ands	r3, r2
 8040b3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8040b3c:	68fb      	ldr	r3, [r7, #12]
 8040b3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8040b40:	68bb      	ldr	r3, [r7, #8]
 8040b42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8040b44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8040b48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8040b4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8040b4e:	4a04      	ldr	r2, [pc, #16]	; (8040b60 <__NVIC_SetPriorityGrouping+0x44>)
 8040b50:	68bb      	ldr	r3, [r7, #8]
 8040b52:	60d3      	str	r3, [r2, #12]
}
 8040b54:	bf00      	nop
 8040b56:	3714      	adds	r7, #20
 8040b58:	46bd      	mov	sp, r7
 8040b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040b5e:	4770      	bx	lr
 8040b60:	e000ed00 	.word	0xe000ed00

08040b64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8040b64:	b480      	push	{r7}
 8040b66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8040b68:	4b04      	ldr	r3, [pc, #16]	; (8040b7c <__NVIC_GetPriorityGrouping+0x18>)
 8040b6a:	68db      	ldr	r3, [r3, #12]
 8040b6c:	0a1b      	lsrs	r3, r3, #8
 8040b6e:	f003 0307 	and.w	r3, r3, #7
}
 8040b72:	4618      	mov	r0, r3
 8040b74:	46bd      	mov	sp, r7
 8040b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040b7a:	4770      	bx	lr
 8040b7c:	e000ed00 	.word	0xe000ed00

08040b80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8040b80:	b480      	push	{r7}
 8040b82:	b083      	sub	sp, #12
 8040b84:	af00      	add	r7, sp, #0
 8040b86:	4603      	mov	r3, r0
 8040b88:	6039      	str	r1, [r7, #0]
 8040b8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8040b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040b90:	2b00      	cmp	r3, #0
 8040b92:	db0a      	blt.n	8040baa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8040b94:	683b      	ldr	r3, [r7, #0]
 8040b96:	b2da      	uxtb	r2, r3
 8040b98:	490c      	ldr	r1, [pc, #48]	; (8040bcc <__NVIC_SetPriority+0x4c>)
 8040b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040b9e:	0112      	lsls	r2, r2, #4
 8040ba0:	b2d2      	uxtb	r2, r2
 8040ba2:	440b      	add	r3, r1
 8040ba4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8040ba8:	e00a      	b.n	8040bc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8040baa:	683b      	ldr	r3, [r7, #0]
 8040bac:	b2da      	uxtb	r2, r3
 8040bae:	4908      	ldr	r1, [pc, #32]	; (8040bd0 <__NVIC_SetPriority+0x50>)
 8040bb0:	79fb      	ldrb	r3, [r7, #7]
 8040bb2:	f003 030f 	and.w	r3, r3, #15
 8040bb6:	3b04      	subs	r3, #4
 8040bb8:	0112      	lsls	r2, r2, #4
 8040bba:	b2d2      	uxtb	r2, r2
 8040bbc:	440b      	add	r3, r1
 8040bbe:	761a      	strb	r2, [r3, #24]
}
 8040bc0:	bf00      	nop
 8040bc2:	370c      	adds	r7, #12
 8040bc4:	46bd      	mov	sp, r7
 8040bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040bca:	4770      	bx	lr
 8040bcc:	e000e100 	.word	0xe000e100
 8040bd0:	e000ed00 	.word	0xe000ed00

08040bd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8040bd4:	b480      	push	{r7}
 8040bd6:	b089      	sub	sp, #36	; 0x24
 8040bd8:	af00      	add	r7, sp, #0
 8040bda:	60f8      	str	r0, [r7, #12]
 8040bdc:	60b9      	str	r1, [r7, #8]
 8040bde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8040be0:	68fb      	ldr	r3, [r7, #12]
 8040be2:	f003 0307 	and.w	r3, r3, #7
 8040be6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8040be8:	69fb      	ldr	r3, [r7, #28]
 8040bea:	f1c3 0307 	rsb	r3, r3, #7
 8040bee:	2b04      	cmp	r3, #4
 8040bf0:	bf28      	it	cs
 8040bf2:	2304      	movcs	r3, #4
 8040bf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8040bf6:	69fb      	ldr	r3, [r7, #28]
 8040bf8:	3304      	adds	r3, #4
 8040bfa:	2b06      	cmp	r3, #6
 8040bfc:	d902      	bls.n	8040c04 <NVIC_EncodePriority+0x30>
 8040bfe:	69fb      	ldr	r3, [r7, #28]
 8040c00:	3b03      	subs	r3, #3
 8040c02:	e000      	b.n	8040c06 <NVIC_EncodePriority+0x32>
 8040c04:	2300      	movs	r3, #0
 8040c06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8040c08:	f04f 32ff 	mov.w	r2, #4294967295
 8040c0c:	69bb      	ldr	r3, [r7, #24]
 8040c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8040c12:	43da      	mvns	r2, r3
 8040c14:	68bb      	ldr	r3, [r7, #8]
 8040c16:	401a      	ands	r2, r3
 8040c18:	697b      	ldr	r3, [r7, #20]
 8040c1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8040c1c:	f04f 31ff 	mov.w	r1, #4294967295
 8040c20:	697b      	ldr	r3, [r7, #20]
 8040c22:	fa01 f303 	lsl.w	r3, r1, r3
 8040c26:	43d9      	mvns	r1, r3
 8040c28:	687b      	ldr	r3, [r7, #4]
 8040c2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8040c2c:	4313      	orrs	r3, r2
         );
}
 8040c2e:	4618      	mov	r0, r3
 8040c30:	3724      	adds	r7, #36	; 0x24
 8040c32:	46bd      	mov	sp, r7
 8040c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040c38:	4770      	bx	lr
	...

08040c3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8040c3c:	b580      	push	{r7, lr}
 8040c3e:	b082      	sub	sp, #8
 8040c40:	af00      	add	r7, sp, #0
 8040c42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8040c44:	687b      	ldr	r3, [r7, #4]
 8040c46:	3b01      	subs	r3, #1
 8040c48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8040c4c:	d301      	bcc.n	8040c52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8040c4e:	2301      	movs	r3, #1
 8040c50:	e00f      	b.n	8040c72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8040c52:	4a0a      	ldr	r2, [pc, #40]	; (8040c7c <SysTick_Config+0x40>)
 8040c54:	687b      	ldr	r3, [r7, #4]
 8040c56:	3b01      	subs	r3, #1
 8040c58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8040c5a:	210f      	movs	r1, #15
 8040c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8040c60:	f7ff ff8e 	bl	8040b80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8040c64:	4b05      	ldr	r3, [pc, #20]	; (8040c7c <SysTick_Config+0x40>)
 8040c66:	2200      	movs	r2, #0
 8040c68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8040c6a:	4b04      	ldr	r3, [pc, #16]	; (8040c7c <SysTick_Config+0x40>)
 8040c6c:	2207      	movs	r2, #7
 8040c6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8040c70:	2300      	movs	r3, #0
}
 8040c72:	4618      	mov	r0, r3
 8040c74:	3708      	adds	r7, #8
 8040c76:	46bd      	mov	sp, r7
 8040c78:	bd80      	pop	{r7, pc}
 8040c7a:	bf00      	nop
 8040c7c:	e000e010 	.word	0xe000e010

08040c80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8040c80:	b580      	push	{r7, lr}
 8040c82:	b082      	sub	sp, #8
 8040c84:	af00      	add	r7, sp, #0
 8040c86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8040c88:	6878      	ldr	r0, [r7, #4]
 8040c8a:	f7ff ff47 	bl	8040b1c <__NVIC_SetPriorityGrouping>
}
 8040c8e:	bf00      	nop
 8040c90:	3708      	adds	r7, #8
 8040c92:	46bd      	mov	sp, r7
 8040c94:	bd80      	pop	{r7, pc}

08040c96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8040c96:	b580      	push	{r7, lr}
 8040c98:	b086      	sub	sp, #24
 8040c9a:	af00      	add	r7, sp, #0
 8040c9c:	4603      	mov	r3, r0
 8040c9e:	60b9      	str	r1, [r7, #8]
 8040ca0:	607a      	str	r2, [r7, #4]
 8040ca2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8040ca4:	2300      	movs	r3, #0
 8040ca6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8040ca8:	f7ff ff5c 	bl	8040b64 <__NVIC_GetPriorityGrouping>
 8040cac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8040cae:	687a      	ldr	r2, [r7, #4]
 8040cb0:	68b9      	ldr	r1, [r7, #8]
 8040cb2:	6978      	ldr	r0, [r7, #20]
 8040cb4:	f7ff ff8e 	bl	8040bd4 <NVIC_EncodePriority>
 8040cb8:	4602      	mov	r2, r0
 8040cba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8040cbe:	4611      	mov	r1, r2
 8040cc0:	4618      	mov	r0, r3
 8040cc2:	f7ff ff5d 	bl	8040b80 <__NVIC_SetPriority>
}
 8040cc6:	bf00      	nop
 8040cc8:	3718      	adds	r7, #24
 8040cca:	46bd      	mov	sp, r7
 8040ccc:	bd80      	pop	{r7, pc}

08040cce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8040cce:	b580      	push	{r7, lr}
 8040cd0:	b082      	sub	sp, #8
 8040cd2:	af00      	add	r7, sp, #0
 8040cd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8040cd6:	6878      	ldr	r0, [r7, #4]
 8040cd8:	f7ff ffb0 	bl	8040c3c <SysTick_Config>
 8040cdc:	4603      	mov	r3, r0
}
 8040cde:	4618      	mov	r0, r3
 8040ce0:	3708      	adds	r7, #8
 8040ce2:	46bd      	mov	sp, r7
 8040ce4:	bd80      	pop	{r7, pc}
	...

08040ce8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8040ce8:	b580      	push	{r7, lr}
 8040cea:	b086      	sub	sp, #24
 8040cec:	af00      	add	r7, sp, #0
 8040cee:	60f8      	str	r0, [r7, #12]
 8040cf0:	60b9      	str	r1, [r7, #8]
 8040cf2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8040cf6:	2301      	movs	r3, #1
 8040cf8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8040cfa:	4b23      	ldr	r3, [pc, #140]	; (8040d88 <HAL_FLASH_Program+0xa0>)
 8040cfc:	7e1b      	ldrb	r3, [r3, #24]
 8040cfe:	2b01      	cmp	r3, #1
 8040d00:	d101      	bne.n	8040d06 <HAL_FLASH_Program+0x1e>
 8040d02:	2302      	movs	r3, #2
 8040d04:	e03b      	b.n	8040d7e <HAL_FLASH_Program+0x96>
 8040d06:	4b20      	ldr	r3, [pc, #128]	; (8040d88 <HAL_FLASH_Program+0xa0>)
 8040d08:	2201      	movs	r2, #1
 8040d0a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8040d0c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8040d10:	f000 f870 	bl	8040df4 <FLASH_WaitForLastOperation>
 8040d14:	4603      	mov	r3, r0
 8040d16:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8040d18:	7dfb      	ldrb	r3, [r7, #23]
 8040d1a:	2b00      	cmp	r3, #0
 8040d1c:	d12b      	bne.n	8040d76 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8040d1e:	68fb      	ldr	r3, [r7, #12]
 8040d20:	2b00      	cmp	r3, #0
 8040d22:	d105      	bne.n	8040d30 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8040d24:	783b      	ldrb	r3, [r7, #0]
 8040d26:	4619      	mov	r1, r3
 8040d28:	68b8      	ldr	r0, [r7, #8]
 8040d2a:	f000 f91b 	bl	8040f64 <FLASH_Program_Byte>
 8040d2e:	e016      	b.n	8040d5e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8040d30:	68fb      	ldr	r3, [r7, #12]
 8040d32:	2b01      	cmp	r3, #1
 8040d34:	d105      	bne.n	8040d42 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8040d36:	883b      	ldrh	r3, [r7, #0]
 8040d38:	4619      	mov	r1, r3
 8040d3a:	68b8      	ldr	r0, [r7, #8]
 8040d3c:	f000 f8ee 	bl	8040f1c <FLASH_Program_HalfWord>
 8040d40:	e00d      	b.n	8040d5e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8040d42:	68fb      	ldr	r3, [r7, #12]
 8040d44:	2b02      	cmp	r3, #2
 8040d46:	d105      	bne.n	8040d54 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8040d48:	683b      	ldr	r3, [r7, #0]
 8040d4a:	4619      	mov	r1, r3
 8040d4c:	68b8      	ldr	r0, [r7, #8]
 8040d4e:	f000 f8c3 	bl	8040ed8 <FLASH_Program_Word>
 8040d52:	e004      	b.n	8040d5e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8040d54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8040d58:	68b8      	ldr	r0, [r7, #8]
 8040d5a:	f000 f88b 	bl	8040e74 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8040d5e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8040d62:	f000 f847 	bl	8040df4 <FLASH_WaitForLastOperation>
 8040d66:	4603      	mov	r3, r0
 8040d68:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8040d6a:	4b08      	ldr	r3, [pc, #32]	; (8040d8c <HAL_FLASH_Program+0xa4>)
 8040d6c:	691b      	ldr	r3, [r3, #16]
 8040d6e:	4a07      	ldr	r2, [pc, #28]	; (8040d8c <HAL_FLASH_Program+0xa4>)
 8040d70:	f023 0301 	bic.w	r3, r3, #1
 8040d74:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8040d76:	4b04      	ldr	r3, [pc, #16]	; (8040d88 <HAL_FLASH_Program+0xa0>)
 8040d78:	2200      	movs	r2, #0
 8040d7a:	761a      	strb	r2, [r3, #24]
  
  return status;
 8040d7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8040d7e:	4618      	mov	r0, r3
 8040d80:	3718      	adds	r7, #24
 8040d82:	46bd      	mov	sp, r7
 8040d84:	bd80      	pop	{r7, pc}
 8040d86:	bf00      	nop
 8040d88:	200000d4 	.word	0x200000d4
 8040d8c:	40023c00 	.word	0x40023c00

08040d90 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8040d90:	b480      	push	{r7}
 8040d92:	b083      	sub	sp, #12
 8040d94:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8040d96:	2300      	movs	r3, #0
 8040d98:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8040d9a:	4b0b      	ldr	r3, [pc, #44]	; (8040dc8 <HAL_FLASH_Unlock+0x38>)
 8040d9c:	691b      	ldr	r3, [r3, #16]
 8040d9e:	2b00      	cmp	r3, #0
 8040da0:	da0b      	bge.n	8040dba <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8040da2:	4b09      	ldr	r3, [pc, #36]	; (8040dc8 <HAL_FLASH_Unlock+0x38>)
 8040da4:	4a09      	ldr	r2, [pc, #36]	; (8040dcc <HAL_FLASH_Unlock+0x3c>)
 8040da6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8040da8:	4b07      	ldr	r3, [pc, #28]	; (8040dc8 <HAL_FLASH_Unlock+0x38>)
 8040daa:	4a09      	ldr	r2, [pc, #36]	; (8040dd0 <HAL_FLASH_Unlock+0x40>)
 8040dac:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8040dae:	4b06      	ldr	r3, [pc, #24]	; (8040dc8 <HAL_FLASH_Unlock+0x38>)
 8040db0:	691b      	ldr	r3, [r3, #16]
 8040db2:	2b00      	cmp	r3, #0
 8040db4:	da01      	bge.n	8040dba <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8040db6:	2301      	movs	r3, #1
 8040db8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8040dba:	79fb      	ldrb	r3, [r7, #7]
}
 8040dbc:	4618      	mov	r0, r3
 8040dbe:	370c      	adds	r7, #12
 8040dc0:	46bd      	mov	sp, r7
 8040dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040dc6:	4770      	bx	lr
 8040dc8:	40023c00 	.word	0x40023c00
 8040dcc:	45670123 	.word	0x45670123
 8040dd0:	cdef89ab 	.word	0xcdef89ab

08040dd4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8040dd4:	b480      	push	{r7}
 8040dd6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8040dd8:	4b05      	ldr	r3, [pc, #20]	; (8040df0 <HAL_FLASH_Lock+0x1c>)
 8040dda:	691b      	ldr	r3, [r3, #16]
 8040ddc:	4a04      	ldr	r2, [pc, #16]	; (8040df0 <HAL_FLASH_Lock+0x1c>)
 8040dde:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8040de2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8040de4:	2300      	movs	r3, #0
}
 8040de6:	4618      	mov	r0, r3
 8040de8:	46bd      	mov	sp, r7
 8040dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040dee:	4770      	bx	lr
 8040df0:	40023c00 	.word	0x40023c00

08040df4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8040df4:	b580      	push	{r7, lr}
 8040df6:	b084      	sub	sp, #16
 8040df8:	af00      	add	r7, sp, #0
 8040dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8040dfc:	2300      	movs	r3, #0
 8040dfe:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8040e00:	4b1a      	ldr	r3, [pc, #104]	; (8040e6c <FLASH_WaitForLastOperation+0x78>)
 8040e02:	2200      	movs	r2, #0
 8040e04:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8040e06:	f7ff fe7d 	bl	8040b04 <HAL_GetTick>
 8040e0a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8040e0c:	e010      	b.n	8040e30 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8040e0e:	687b      	ldr	r3, [r7, #4]
 8040e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8040e14:	d00c      	beq.n	8040e30 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8040e16:	687b      	ldr	r3, [r7, #4]
 8040e18:	2b00      	cmp	r3, #0
 8040e1a:	d007      	beq.n	8040e2c <FLASH_WaitForLastOperation+0x38>
 8040e1c:	f7ff fe72 	bl	8040b04 <HAL_GetTick>
 8040e20:	4602      	mov	r2, r0
 8040e22:	68fb      	ldr	r3, [r7, #12]
 8040e24:	1ad3      	subs	r3, r2, r3
 8040e26:	687a      	ldr	r2, [r7, #4]
 8040e28:	429a      	cmp	r2, r3
 8040e2a:	d201      	bcs.n	8040e30 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8040e2c:	2303      	movs	r3, #3
 8040e2e:	e019      	b.n	8040e64 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8040e30:	4b0f      	ldr	r3, [pc, #60]	; (8040e70 <FLASH_WaitForLastOperation+0x7c>)
 8040e32:	68db      	ldr	r3, [r3, #12]
 8040e34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8040e38:	2b00      	cmp	r3, #0
 8040e3a:	d1e8      	bne.n	8040e0e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8040e3c:	4b0c      	ldr	r3, [pc, #48]	; (8040e70 <FLASH_WaitForLastOperation+0x7c>)
 8040e3e:	68db      	ldr	r3, [r3, #12]
 8040e40:	f003 0301 	and.w	r3, r3, #1
 8040e44:	2b00      	cmp	r3, #0
 8040e46:	d002      	beq.n	8040e4e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8040e48:	4b09      	ldr	r3, [pc, #36]	; (8040e70 <FLASH_WaitForLastOperation+0x7c>)
 8040e4a:	2201      	movs	r2, #1
 8040e4c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8040e4e:	4b08      	ldr	r3, [pc, #32]	; (8040e70 <FLASH_WaitForLastOperation+0x7c>)
 8040e50:	68db      	ldr	r3, [r3, #12]
 8040e52:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8040e56:	2b00      	cmp	r3, #0
 8040e58:	d003      	beq.n	8040e62 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8040e5a:	f000 f8a5 	bl	8040fa8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8040e5e:	2301      	movs	r3, #1
 8040e60:	e000      	b.n	8040e64 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8040e62:	2300      	movs	r3, #0
  
}  
 8040e64:	4618      	mov	r0, r3
 8040e66:	3710      	adds	r7, #16
 8040e68:	46bd      	mov	sp, r7
 8040e6a:	bd80      	pop	{r7, pc}
 8040e6c:	200000d4 	.word	0x200000d4
 8040e70:	40023c00 	.word	0x40023c00

08040e74 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8040e74:	b480      	push	{r7}
 8040e76:	b085      	sub	sp, #20
 8040e78:	af00      	add	r7, sp, #0
 8040e7a:	60f8      	str	r0, [r7, #12]
 8040e7c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8040e80:	4b14      	ldr	r3, [pc, #80]	; (8040ed4 <FLASH_Program_DoubleWord+0x60>)
 8040e82:	691b      	ldr	r3, [r3, #16]
 8040e84:	4a13      	ldr	r2, [pc, #76]	; (8040ed4 <FLASH_Program_DoubleWord+0x60>)
 8040e86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8040e8a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8040e8c:	4b11      	ldr	r3, [pc, #68]	; (8040ed4 <FLASH_Program_DoubleWord+0x60>)
 8040e8e:	691b      	ldr	r3, [r3, #16]
 8040e90:	4a10      	ldr	r2, [pc, #64]	; (8040ed4 <FLASH_Program_DoubleWord+0x60>)
 8040e92:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8040e96:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8040e98:	4b0e      	ldr	r3, [pc, #56]	; (8040ed4 <FLASH_Program_DoubleWord+0x60>)
 8040e9a:	691b      	ldr	r3, [r3, #16]
 8040e9c:	4a0d      	ldr	r2, [pc, #52]	; (8040ed4 <FLASH_Program_DoubleWord+0x60>)
 8040e9e:	f043 0301 	orr.w	r3, r3, #1
 8040ea2:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8040ea4:	68fb      	ldr	r3, [r7, #12]
 8040ea6:	683a      	ldr	r2, [r7, #0]
 8040ea8:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8040eaa:	f3bf 8f6f 	isb	sy
}
 8040eae:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8040eb0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8040eb4:	f04f 0200 	mov.w	r2, #0
 8040eb8:	f04f 0300 	mov.w	r3, #0
 8040ebc:	000a      	movs	r2, r1
 8040ebe:	2300      	movs	r3, #0
 8040ec0:	68f9      	ldr	r1, [r7, #12]
 8040ec2:	3104      	adds	r1, #4
 8040ec4:	4613      	mov	r3, r2
 8040ec6:	600b      	str	r3, [r1, #0]
}
 8040ec8:	bf00      	nop
 8040eca:	3714      	adds	r7, #20
 8040ecc:	46bd      	mov	sp, r7
 8040ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040ed2:	4770      	bx	lr
 8040ed4:	40023c00 	.word	0x40023c00

08040ed8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8040ed8:	b480      	push	{r7}
 8040eda:	b083      	sub	sp, #12
 8040edc:	af00      	add	r7, sp, #0
 8040ede:	6078      	str	r0, [r7, #4]
 8040ee0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8040ee2:	4b0d      	ldr	r3, [pc, #52]	; (8040f18 <FLASH_Program_Word+0x40>)
 8040ee4:	691b      	ldr	r3, [r3, #16]
 8040ee6:	4a0c      	ldr	r2, [pc, #48]	; (8040f18 <FLASH_Program_Word+0x40>)
 8040ee8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8040eec:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8040eee:	4b0a      	ldr	r3, [pc, #40]	; (8040f18 <FLASH_Program_Word+0x40>)
 8040ef0:	691b      	ldr	r3, [r3, #16]
 8040ef2:	4a09      	ldr	r2, [pc, #36]	; (8040f18 <FLASH_Program_Word+0x40>)
 8040ef4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8040ef8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8040efa:	4b07      	ldr	r3, [pc, #28]	; (8040f18 <FLASH_Program_Word+0x40>)
 8040efc:	691b      	ldr	r3, [r3, #16]
 8040efe:	4a06      	ldr	r2, [pc, #24]	; (8040f18 <FLASH_Program_Word+0x40>)
 8040f00:	f043 0301 	orr.w	r3, r3, #1
 8040f04:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8040f06:	687b      	ldr	r3, [r7, #4]
 8040f08:	683a      	ldr	r2, [r7, #0]
 8040f0a:	601a      	str	r2, [r3, #0]
}
 8040f0c:	bf00      	nop
 8040f0e:	370c      	adds	r7, #12
 8040f10:	46bd      	mov	sp, r7
 8040f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040f16:	4770      	bx	lr
 8040f18:	40023c00 	.word	0x40023c00

08040f1c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8040f1c:	b480      	push	{r7}
 8040f1e:	b083      	sub	sp, #12
 8040f20:	af00      	add	r7, sp, #0
 8040f22:	6078      	str	r0, [r7, #4]
 8040f24:	460b      	mov	r3, r1
 8040f26:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8040f28:	4b0d      	ldr	r3, [pc, #52]	; (8040f60 <FLASH_Program_HalfWord+0x44>)
 8040f2a:	691b      	ldr	r3, [r3, #16]
 8040f2c:	4a0c      	ldr	r2, [pc, #48]	; (8040f60 <FLASH_Program_HalfWord+0x44>)
 8040f2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8040f32:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8040f34:	4b0a      	ldr	r3, [pc, #40]	; (8040f60 <FLASH_Program_HalfWord+0x44>)
 8040f36:	691b      	ldr	r3, [r3, #16]
 8040f38:	4a09      	ldr	r2, [pc, #36]	; (8040f60 <FLASH_Program_HalfWord+0x44>)
 8040f3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8040f3e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8040f40:	4b07      	ldr	r3, [pc, #28]	; (8040f60 <FLASH_Program_HalfWord+0x44>)
 8040f42:	691b      	ldr	r3, [r3, #16]
 8040f44:	4a06      	ldr	r2, [pc, #24]	; (8040f60 <FLASH_Program_HalfWord+0x44>)
 8040f46:	f043 0301 	orr.w	r3, r3, #1
 8040f4a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8040f4c:	687b      	ldr	r3, [r7, #4]
 8040f4e:	887a      	ldrh	r2, [r7, #2]
 8040f50:	801a      	strh	r2, [r3, #0]
}
 8040f52:	bf00      	nop
 8040f54:	370c      	adds	r7, #12
 8040f56:	46bd      	mov	sp, r7
 8040f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040f5c:	4770      	bx	lr
 8040f5e:	bf00      	nop
 8040f60:	40023c00 	.word	0x40023c00

08040f64 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8040f64:	b480      	push	{r7}
 8040f66:	b083      	sub	sp, #12
 8040f68:	af00      	add	r7, sp, #0
 8040f6a:	6078      	str	r0, [r7, #4]
 8040f6c:	460b      	mov	r3, r1
 8040f6e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8040f70:	4b0c      	ldr	r3, [pc, #48]	; (8040fa4 <FLASH_Program_Byte+0x40>)
 8040f72:	691b      	ldr	r3, [r3, #16]
 8040f74:	4a0b      	ldr	r2, [pc, #44]	; (8040fa4 <FLASH_Program_Byte+0x40>)
 8040f76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8040f7a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8040f7c:	4b09      	ldr	r3, [pc, #36]	; (8040fa4 <FLASH_Program_Byte+0x40>)
 8040f7e:	4a09      	ldr	r2, [pc, #36]	; (8040fa4 <FLASH_Program_Byte+0x40>)
 8040f80:	691b      	ldr	r3, [r3, #16]
 8040f82:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8040f84:	4b07      	ldr	r3, [pc, #28]	; (8040fa4 <FLASH_Program_Byte+0x40>)
 8040f86:	691b      	ldr	r3, [r3, #16]
 8040f88:	4a06      	ldr	r2, [pc, #24]	; (8040fa4 <FLASH_Program_Byte+0x40>)
 8040f8a:	f043 0301 	orr.w	r3, r3, #1
 8040f8e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8040f90:	687b      	ldr	r3, [r7, #4]
 8040f92:	78fa      	ldrb	r2, [r7, #3]
 8040f94:	701a      	strb	r2, [r3, #0]
}
 8040f96:	bf00      	nop
 8040f98:	370c      	adds	r7, #12
 8040f9a:	46bd      	mov	sp, r7
 8040f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040fa0:	4770      	bx	lr
 8040fa2:	bf00      	nop
 8040fa4:	40023c00 	.word	0x40023c00

08040fa8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8040fa8:	b480      	push	{r7}
 8040faa:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8040fac:	4b27      	ldr	r3, [pc, #156]	; (804104c <FLASH_SetErrorCode+0xa4>)
 8040fae:	68db      	ldr	r3, [r3, #12]
 8040fb0:	f003 0310 	and.w	r3, r3, #16
 8040fb4:	2b00      	cmp	r3, #0
 8040fb6:	d008      	beq.n	8040fca <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8040fb8:	4b25      	ldr	r3, [pc, #148]	; (8041050 <FLASH_SetErrorCode+0xa8>)
 8040fba:	69db      	ldr	r3, [r3, #28]
 8040fbc:	f043 0310 	orr.w	r3, r3, #16
 8040fc0:	4a23      	ldr	r2, [pc, #140]	; (8041050 <FLASH_SetErrorCode+0xa8>)
 8040fc2:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8040fc4:	4b21      	ldr	r3, [pc, #132]	; (804104c <FLASH_SetErrorCode+0xa4>)
 8040fc6:	2210      	movs	r2, #16
 8040fc8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8040fca:	4b20      	ldr	r3, [pc, #128]	; (804104c <FLASH_SetErrorCode+0xa4>)
 8040fcc:	68db      	ldr	r3, [r3, #12]
 8040fce:	f003 0320 	and.w	r3, r3, #32
 8040fd2:	2b00      	cmp	r3, #0
 8040fd4:	d008      	beq.n	8040fe8 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8040fd6:	4b1e      	ldr	r3, [pc, #120]	; (8041050 <FLASH_SetErrorCode+0xa8>)
 8040fd8:	69db      	ldr	r3, [r3, #28]
 8040fda:	f043 0308 	orr.w	r3, r3, #8
 8040fde:	4a1c      	ldr	r2, [pc, #112]	; (8041050 <FLASH_SetErrorCode+0xa8>)
 8040fe0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8040fe2:	4b1a      	ldr	r3, [pc, #104]	; (804104c <FLASH_SetErrorCode+0xa4>)
 8040fe4:	2220      	movs	r2, #32
 8040fe6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8040fe8:	4b18      	ldr	r3, [pc, #96]	; (804104c <FLASH_SetErrorCode+0xa4>)
 8040fea:	68db      	ldr	r3, [r3, #12]
 8040fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8040ff0:	2b00      	cmp	r3, #0
 8040ff2:	d008      	beq.n	8041006 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8040ff4:	4b16      	ldr	r3, [pc, #88]	; (8041050 <FLASH_SetErrorCode+0xa8>)
 8040ff6:	69db      	ldr	r3, [r3, #28]
 8040ff8:	f043 0304 	orr.w	r3, r3, #4
 8040ffc:	4a14      	ldr	r2, [pc, #80]	; (8041050 <FLASH_SetErrorCode+0xa8>)
 8040ffe:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8041000:	4b12      	ldr	r3, [pc, #72]	; (804104c <FLASH_SetErrorCode+0xa4>)
 8041002:	2240      	movs	r2, #64	; 0x40
 8041004:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8041006:	4b11      	ldr	r3, [pc, #68]	; (804104c <FLASH_SetErrorCode+0xa4>)
 8041008:	68db      	ldr	r3, [r3, #12]
 804100a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804100e:	2b00      	cmp	r3, #0
 8041010:	d008      	beq.n	8041024 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8041012:	4b0f      	ldr	r3, [pc, #60]	; (8041050 <FLASH_SetErrorCode+0xa8>)
 8041014:	69db      	ldr	r3, [r3, #28]
 8041016:	f043 0302 	orr.w	r3, r3, #2
 804101a:	4a0d      	ldr	r2, [pc, #52]	; (8041050 <FLASH_SetErrorCode+0xa8>)
 804101c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 804101e:	4b0b      	ldr	r3, [pc, #44]	; (804104c <FLASH_SetErrorCode+0xa4>)
 8041020:	2280      	movs	r2, #128	; 0x80
 8041022:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8041024:	4b09      	ldr	r3, [pc, #36]	; (804104c <FLASH_SetErrorCode+0xa4>)
 8041026:	68db      	ldr	r3, [r3, #12]
 8041028:	f003 0302 	and.w	r3, r3, #2
 804102c:	2b00      	cmp	r3, #0
 804102e:	d008      	beq.n	8041042 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8041030:	4b07      	ldr	r3, [pc, #28]	; (8041050 <FLASH_SetErrorCode+0xa8>)
 8041032:	69db      	ldr	r3, [r3, #28]
 8041034:	f043 0320 	orr.w	r3, r3, #32
 8041038:	4a05      	ldr	r2, [pc, #20]	; (8041050 <FLASH_SetErrorCode+0xa8>)
 804103a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 804103c:	4b03      	ldr	r3, [pc, #12]	; (804104c <FLASH_SetErrorCode+0xa4>)
 804103e:	2202      	movs	r2, #2
 8041040:	60da      	str	r2, [r3, #12]
  }
}
 8041042:	bf00      	nop
 8041044:	46bd      	mov	sp, r7
 8041046:	f85d 7b04 	ldr.w	r7, [sp], #4
 804104a:	4770      	bx	lr
 804104c:	40023c00 	.word	0x40023c00
 8041050:	200000d4 	.word	0x200000d4

08041054 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8041054:	b580      	push	{r7, lr}
 8041056:	b084      	sub	sp, #16
 8041058:	af00      	add	r7, sp, #0
 804105a:	6078      	str	r0, [r7, #4]
 804105c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 804105e:	2301      	movs	r3, #1
 8041060:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8041062:	2300      	movs	r3, #0
 8041064:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8041066:	4b31      	ldr	r3, [pc, #196]	; (804112c <HAL_FLASHEx_Erase+0xd8>)
 8041068:	7e1b      	ldrb	r3, [r3, #24]
 804106a:	2b01      	cmp	r3, #1
 804106c:	d101      	bne.n	8041072 <HAL_FLASHEx_Erase+0x1e>
 804106e:	2302      	movs	r3, #2
 8041070:	e058      	b.n	8041124 <HAL_FLASHEx_Erase+0xd0>
 8041072:	4b2e      	ldr	r3, [pc, #184]	; (804112c <HAL_FLASHEx_Erase+0xd8>)
 8041074:	2201      	movs	r2, #1
 8041076:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8041078:	f24c 3050 	movw	r0, #50000	; 0xc350
 804107c:	f7ff feba 	bl	8040df4 <FLASH_WaitForLastOperation>
 8041080:	4603      	mov	r3, r0
 8041082:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8041084:	7bfb      	ldrb	r3, [r7, #15]
 8041086:	2b00      	cmp	r3, #0
 8041088:	d148      	bne.n	804111c <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 804108a:	683b      	ldr	r3, [r7, #0]
 804108c:	f04f 32ff 	mov.w	r2, #4294967295
 8041090:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8041092:	687b      	ldr	r3, [r7, #4]
 8041094:	681b      	ldr	r3, [r3, #0]
 8041096:	2b01      	cmp	r3, #1
 8041098:	d115      	bne.n	80410c6 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 804109a:	687b      	ldr	r3, [r7, #4]
 804109c:	691b      	ldr	r3, [r3, #16]
 804109e:	b2da      	uxtb	r2, r3
 80410a0:	687b      	ldr	r3, [r7, #4]
 80410a2:	685b      	ldr	r3, [r3, #4]
 80410a4:	4619      	mov	r1, r3
 80410a6:	4610      	mov	r0, r2
 80410a8:	f000 f844 	bl	8041134 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80410ac:	f24c 3050 	movw	r0, #50000	; 0xc350
 80410b0:	f7ff fea0 	bl	8040df4 <FLASH_WaitForLastOperation>
 80410b4:	4603      	mov	r3, r0
 80410b6:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80410b8:	4b1d      	ldr	r3, [pc, #116]	; (8041130 <HAL_FLASHEx_Erase+0xdc>)
 80410ba:	691b      	ldr	r3, [r3, #16]
 80410bc:	4a1c      	ldr	r2, [pc, #112]	; (8041130 <HAL_FLASHEx_Erase+0xdc>)
 80410be:	f023 0304 	bic.w	r3, r3, #4
 80410c2:	6113      	str	r3, [r2, #16]
 80410c4:	e028      	b.n	8041118 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80410c6:	687b      	ldr	r3, [r7, #4]
 80410c8:	689b      	ldr	r3, [r3, #8]
 80410ca:	60bb      	str	r3, [r7, #8]
 80410cc:	e01c      	b.n	8041108 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80410ce:	687b      	ldr	r3, [r7, #4]
 80410d0:	691b      	ldr	r3, [r3, #16]
 80410d2:	b2db      	uxtb	r3, r3
 80410d4:	4619      	mov	r1, r3
 80410d6:	68b8      	ldr	r0, [r7, #8]
 80410d8:	f000 f850 	bl	804117c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80410dc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80410e0:	f7ff fe88 	bl	8040df4 <FLASH_WaitForLastOperation>
 80410e4:	4603      	mov	r3, r0
 80410e6:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80410e8:	4b11      	ldr	r3, [pc, #68]	; (8041130 <HAL_FLASHEx_Erase+0xdc>)
 80410ea:	691b      	ldr	r3, [r3, #16]
 80410ec:	4a10      	ldr	r2, [pc, #64]	; (8041130 <HAL_FLASHEx_Erase+0xdc>)
 80410ee:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80410f2:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80410f4:	7bfb      	ldrb	r3, [r7, #15]
 80410f6:	2b00      	cmp	r3, #0
 80410f8:	d003      	beq.n	8041102 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80410fa:	683b      	ldr	r3, [r7, #0]
 80410fc:	68ba      	ldr	r2, [r7, #8]
 80410fe:	601a      	str	r2, [r3, #0]
          break;
 8041100:	e00a      	b.n	8041118 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8041102:	68bb      	ldr	r3, [r7, #8]
 8041104:	3301      	adds	r3, #1
 8041106:	60bb      	str	r3, [r7, #8]
 8041108:	687b      	ldr	r3, [r7, #4]
 804110a:	68da      	ldr	r2, [r3, #12]
 804110c:	687b      	ldr	r3, [r7, #4]
 804110e:	689b      	ldr	r3, [r3, #8]
 8041110:	4413      	add	r3, r2
 8041112:	68ba      	ldr	r2, [r7, #8]
 8041114:	429a      	cmp	r2, r3
 8041116:	d3da      	bcc.n	80410ce <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8041118:	f000 f878 	bl	804120c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 804111c:	4b03      	ldr	r3, [pc, #12]	; (804112c <HAL_FLASHEx_Erase+0xd8>)
 804111e:	2200      	movs	r2, #0
 8041120:	761a      	strb	r2, [r3, #24]

  return status;
 8041122:	7bfb      	ldrb	r3, [r7, #15]
}
 8041124:	4618      	mov	r0, r3
 8041126:	3710      	adds	r7, #16
 8041128:	46bd      	mov	sp, r7
 804112a:	bd80      	pop	{r7, pc}
 804112c:	200000d4 	.word	0x200000d4
 8041130:	40023c00 	.word	0x40023c00

08041134 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8041134:	b480      	push	{r7}
 8041136:	b083      	sub	sp, #12
 8041138:	af00      	add	r7, sp, #0
 804113a:	4603      	mov	r3, r0
 804113c:	6039      	str	r1, [r7, #0]
 804113e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8041140:	4b0d      	ldr	r3, [pc, #52]	; (8041178 <FLASH_MassErase+0x44>)
 8041142:	691b      	ldr	r3, [r3, #16]
 8041144:	4a0c      	ldr	r2, [pc, #48]	; (8041178 <FLASH_MassErase+0x44>)
 8041146:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 804114a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 804114c:	4b0a      	ldr	r3, [pc, #40]	; (8041178 <FLASH_MassErase+0x44>)
 804114e:	691b      	ldr	r3, [r3, #16]
 8041150:	4a09      	ldr	r2, [pc, #36]	; (8041178 <FLASH_MassErase+0x44>)
 8041152:	f043 0304 	orr.w	r3, r3, #4
 8041156:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8041158:	4b07      	ldr	r3, [pc, #28]	; (8041178 <FLASH_MassErase+0x44>)
 804115a:	691a      	ldr	r2, [r3, #16]
 804115c:	79fb      	ldrb	r3, [r7, #7]
 804115e:	021b      	lsls	r3, r3, #8
 8041160:	4313      	orrs	r3, r2
 8041162:	4a05      	ldr	r2, [pc, #20]	; (8041178 <FLASH_MassErase+0x44>)
 8041164:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8041168:	6113      	str	r3, [r2, #16]
}
 804116a:	bf00      	nop
 804116c:	370c      	adds	r7, #12
 804116e:	46bd      	mov	sp, r7
 8041170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041174:	4770      	bx	lr
 8041176:	bf00      	nop
 8041178:	40023c00 	.word	0x40023c00

0804117c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 804117c:	b480      	push	{r7}
 804117e:	b085      	sub	sp, #20
 8041180:	af00      	add	r7, sp, #0
 8041182:	6078      	str	r0, [r7, #4]
 8041184:	460b      	mov	r3, r1
 8041186:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8041188:	2300      	movs	r3, #0
 804118a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 804118c:	78fb      	ldrb	r3, [r7, #3]
 804118e:	2b00      	cmp	r3, #0
 8041190:	d102      	bne.n	8041198 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8041192:	2300      	movs	r3, #0
 8041194:	60fb      	str	r3, [r7, #12]
 8041196:	e010      	b.n	80411ba <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8041198:	78fb      	ldrb	r3, [r7, #3]
 804119a:	2b01      	cmp	r3, #1
 804119c:	d103      	bne.n	80411a6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 804119e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80411a2:	60fb      	str	r3, [r7, #12]
 80411a4:	e009      	b.n	80411ba <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80411a6:	78fb      	ldrb	r3, [r7, #3]
 80411a8:	2b02      	cmp	r3, #2
 80411aa:	d103      	bne.n	80411b4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80411ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80411b0:	60fb      	str	r3, [r7, #12]
 80411b2:	e002      	b.n	80411ba <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80411b4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80411b8:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80411ba:	4b13      	ldr	r3, [pc, #76]	; (8041208 <FLASH_Erase_Sector+0x8c>)
 80411bc:	691b      	ldr	r3, [r3, #16]
 80411be:	4a12      	ldr	r2, [pc, #72]	; (8041208 <FLASH_Erase_Sector+0x8c>)
 80411c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80411c4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80411c6:	4b10      	ldr	r3, [pc, #64]	; (8041208 <FLASH_Erase_Sector+0x8c>)
 80411c8:	691a      	ldr	r2, [r3, #16]
 80411ca:	490f      	ldr	r1, [pc, #60]	; (8041208 <FLASH_Erase_Sector+0x8c>)
 80411cc:	68fb      	ldr	r3, [r7, #12]
 80411ce:	4313      	orrs	r3, r2
 80411d0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80411d2:	4b0d      	ldr	r3, [pc, #52]	; (8041208 <FLASH_Erase_Sector+0x8c>)
 80411d4:	691b      	ldr	r3, [r3, #16]
 80411d6:	4a0c      	ldr	r2, [pc, #48]	; (8041208 <FLASH_Erase_Sector+0x8c>)
 80411d8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80411dc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80411de:	4b0a      	ldr	r3, [pc, #40]	; (8041208 <FLASH_Erase_Sector+0x8c>)
 80411e0:	691a      	ldr	r2, [r3, #16]
 80411e2:	687b      	ldr	r3, [r7, #4]
 80411e4:	00db      	lsls	r3, r3, #3
 80411e6:	4313      	orrs	r3, r2
 80411e8:	4a07      	ldr	r2, [pc, #28]	; (8041208 <FLASH_Erase_Sector+0x8c>)
 80411ea:	f043 0302 	orr.w	r3, r3, #2
 80411ee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80411f0:	4b05      	ldr	r3, [pc, #20]	; (8041208 <FLASH_Erase_Sector+0x8c>)
 80411f2:	691b      	ldr	r3, [r3, #16]
 80411f4:	4a04      	ldr	r2, [pc, #16]	; (8041208 <FLASH_Erase_Sector+0x8c>)
 80411f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80411fa:	6113      	str	r3, [r2, #16]
}
 80411fc:	bf00      	nop
 80411fe:	3714      	adds	r7, #20
 8041200:	46bd      	mov	sp, r7
 8041202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041206:	4770      	bx	lr
 8041208:	40023c00 	.word	0x40023c00

0804120c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 804120c:	b480      	push	{r7}
 804120e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8041210:	4b20      	ldr	r3, [pc, #128]	; (8041294 <FLASH_FlushCaches+0x88>)
 8041212:	681b      	ldr	r3, [r3, #0]
 8041214:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8041218:	2b00      	cmp	r3, #0
 804121a:	d017      	beq.n	804124c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 804121c:	4b1d      	ldr	r3, [pc, #116]	; (8041294 <FLASH_FlushCaches+0x88>)
 804121e:	681b      	ldr	r3, [r3, #0]
 8041220:	4a1c      	ldr	r2, [pc, #112]	; (8041294 <FLASH_FlushCaches+0x88>)
 8041222:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8041226:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8041228:	4b1a      	ldr	r3, [pc, #104]	; (8041294 <FLASH_FlushCaches+0x88>)
 804122a:	681b      	ldr	r3, [r3, #0]
 804122c:	4a19      	ldr	r2, [pc, #100]	; (8041294 <FLASH_FlushCaches+0x88>)
 804122e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8041232:	6013      	str	r3, [r2, #0]
 8041234:	4b17      	ldr	r3, [pc, #92]	; (8041294 <FLASH_FlushCaches+0x88>)
 8041236:	681b      	ldr	r3, [r3, #0]
 8041238:	4a16      	ldr	r2, [pc, #88]	; (8041294 <FLASH_FlushCaches+0x88>)
 804123a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 804123e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8041240:	4b14      	ldr	r3, [pc, #80]	; (8041294 <FLASH_FlushCaches+0x88>)
 8041242:	681b      	ldr	r3, [r3, #0]
 8041244:	4a13      	ldr	r2, [pc, #76]	; (8041294 <FLASH_FlushCaches+0x88>)
 8041246:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 804124a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 804124c:	4b11      	ldr	r3, [pc, #68]	; (8041294 <FLASH_FlushCaches+0x88>)
 804124e:	681b      	ldr	r3, [r3, #0]
 8041250:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8041254:	2b00      	cmp	r3, #0
 8041256:	d017      	beq.n	8041288 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8041258:	4b0e      	ldr	r3, [pc, #56]	; (8041294 <FLASH_FlushCaches+0x88>)
 804125a:	681b      	ldr	r3, [r3, #0]
 804125c:	4a0d      	ldr	r2, [pc, #52]	; (8041294 <FLASH_FlushCaches+0x88>)
 804125e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8041262:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8041264:	4b0b      	ldr	r3, [pc, #44]	; (8041294 <FLASH_FlushCaches+0x88>)
 8041266:	681b      	ldr	r3, [r3, #0]
 8041268:	4a0a      	ldr	r2, [pc, #40]	; (8041294 <FLASH_FlushCaches+0x88>)
 804126a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 804126e:	6013      	str	r3, [r2, #0]
 8041270:	4b08      	ldr	r3, [pc, #32]	; (8041294 <FLASH_FlushCaches+0x88>)
 8041272:	681b      	ldr	r3, [r3, #0]
 8041274:	4a07      	ldr	r2, [pc, #28]	; (8041294 <FLASH_FlushCaches+0x88>)
 8041276:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 804127a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 804127c:	4b05      	ldr	r3, [pc, #20]	; (8041294 <FLASH_FlushCaches+0x88>)
 804127e:	681b      	ldr	r3, [r3, #0]
 8041280:	4a04      	ldr	r2, [pc, #16]	; (8041294 <FLASH_FlushCaches+0x88>)
 8041282:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8041286:	6013      	str	r3, [r2, #0]
  }
}
 8041288:	bf00      	nop
 804128a:	46bd      	mov	sp, r7
 804128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041290:	4770      	bx	lr
 8041292:	bf00      	nop
 8041294:	40023c00 	.word	0x40023c00

08041298 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8041298:	b480      	push	{r7}
 804129a:	b089      	sub	sp, #36	; 0x24
 804129c:	af00      	add	r7, sp, #0
 804129e:	6078      	str	r0, [r7, #4]
 80412a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80412a2:	2300      	movs	r3, #0
 80412a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80412a6:	2300      	movs	r3, #0
 80412a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80412aa:	2300      	movs	r3, #0
 80412ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80412ae:	2300      	movs	r3, #0
 80412b0:	61fb      	str	r3, [r7, #28]
 80412b2:	e16b      	b.n	804158c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80412b4:	2201      	movs	r2, #1
 80412b6:	69fb      	ldr	r3, [r7, #28]
 80412b8:	fa02 f303 	lsl.w	r3, r2, r3
 80412bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80412be:	683b      	ldr	r3, [r7, #0]
 80412c0:	681b      	ldr	r3, [r3, #0]
 80412c2:	697a      	ldr	r2, [r7, #20]
 80412c4:	4013      	ands	r3, r2
 80412c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80412c8:	693a      	ldr	r2, [r7, #16]
 80412ca:	697b      	ldr	r3, [r7, #20]
 80412cc:	429a      	cmp	r2, r3
 80412ce:	f040 815a 	bne.w	8041586 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80412d2:	683b      	ldr	r3, [r7, #0]
 80412d4:	685b      	ldr	r3, [r3, #4]
 80412d6:	f003 0303 	and.w	r3, r3, #3
 80412da:	2b01      	cmp	r3, #1
 80412dc:	d005      	beq.n	80412ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80412de:	683b      	ldr	r3, [r7, #0]
 80412e0:	685b      	ldr	r3, [r3, #4]
 80412e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80412e6:	2b02      	cmp	r3, #2
 80412e8:	d130      	bne.n	804134c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80412ea:	687b      	ldr	r3, [r7, #4]
 80412ec:	689b      	ldr	r3, [r3, #8]
 80412ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80412f0:	69fb      	ldr	r3, [r7, #28]
 80412f2:	005b      	lsls	r3, r3, #1
 80412f4:	2203      	movs	r2, #3
 80412f6:	fa02 f303 	lsl.w	r3, r2, r3
 80412fa:	43db      	mvns	r3, r3
 80412fc:	69ba      	ldr	r2, [r7, #24]
 80412fe:	4013      	ands	r3, r2
 8041300:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8041302:	683b      	ldr	r3, [r7, #0]
 8041304:	68da      	ldr	r2, [r3, #12]
 8041306:	69fb      	ldr	r3, [r7, #28]
 8041308:	005b      	lsls	r3, r3, #1
 804130a:	fa02 f303 	lsl.w	r3, r2, r3
 804130e:	69ba      	ldr	r2, [r7, #24]
 8041310:	4313      	orrs	r3, r2
 8041312:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8041314:	687b      	ldr	r3, [r7, #4]
 8041316:	69ba      	ldr	r2, [r7, #24]
 8041318:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 804131a:	687b      	ldr	r3, [r7, #4]
 804131c:	685b      	ldr	r3, [r3, #4]
 804131e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8041320:	2201      	movs	r2, #1
 8041322:	69fb      	ldr	r3, [r7, #28]
 8041324:	fa02 f303 	lsl.w	r3, r2, r3
 8041328:	43db      	mvns	r3, r3
 804132a:	69ba      	ldr	r2, [r7, #24]
 804132c:	4013      	ands	r3, r2
 804132e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8041330:	683b      	ldr	r3, [r7, #0]
 8041332:	685b      	ldr	r3, [r3, #4]
 8041334:	091b      	lsrs	r3, r3, #4
 8041336:	f003 0201 	and.w	r2, r3, #1
 804133a:	69fb      	ldr	r3, [r7, #28]
 804133c:	fa02 f303 	lsl.w	r3, r2, r3
 8041340:	69ba      	ldr	r2, [r7, #24]
 8041342:	4313      	orrs	r3, r2
 8041344:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8041346:	687b      	ldr	r3, [r7, #4]
 8041348:	69ba      	ldr	r2, [r7, #24]
 804134a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 804134c:	683b      	ldr	r3, [r7, #0]
 804134e:	685b      	ldr	r3, [r3, #4]
 8041350:	f003 0303 	and.w	r3, r3, #3
 8041354:	2b03      	cmp	r3, #3
 8041356:	d017      	beq.n	8041388 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8041358:	687b      	ldr	r3, [r7, #4]
 804135a:	68db      	ldr	r3, [r3, #12]
 804135c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 804135e:	69fb      	ldr	r3, [r7, #28]
 8041360:	005b      	lsls	r3, r3, #1
 8041362:	2203      	movs	r2, #3
 8041364:	fa02 f303 	lsl.w	r3, r2, r3
 8041368:	43db      	mvns	r3, r3
 804136a:	69ba      	ldr	r2, [r7, #24]
 804136c:	4013      	ands	r3, r2
 804136e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8041370:	683b      	ldr	r3, [r7, #0]
 8041372:	689a      	ldr	r2, [r3, #8]
 8041374:	69fb      	ldr	r3, [r7, #28]
 8041376:	005b      	lsls	r3, r3, #1
 8041378:	fa02 f303 	lsl.w	r3, r2, r3
 804137c:	69ba      	ldr	r2, [r7, #24]
 804137e:	4313      	orrs	r3, r2
 8041380:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8041382:	687b      	ldr	r3, [r7, #4]
 8041384:	69ba      	ldr	r2, [r7, #24]
 8041386:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8041388:	683b      	ldr	r3, [r7, #0]
 804138a:	685b      	ldr	r3, [r3, #4]
 804138c:	f003 0303 	and.w	r3, r3, #3
 8041390:	2b02      	cmp	r3, #2
 8041392:	d123      	bne.n	80413dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8041394:	69fb      	ldr	r3, [r7, #28]
 8041396:	08da      	lsrs	r2, r3, #3
 8041398:	687b      	ldr	r3, [r7, #4]
 804139a:	3208      	adds	r2, #8
 804139c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80413a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80413a2:	69fb      	ldr	r3, [r7, #28]
 80413a4:	f003 0307 	and.w	r3, r3, #7
 80413a8:	009b      	lsls	r3, r3, #2
 80413aa:	220f      	movs	r2, #15
 80413ac:	fa02 f303 	lsl.w	r3, r2, r3
 80413b0:	43db      	mvns	r3, r3
 80413b2:	69ba      	ldr	r2, [r7, #24]
 80413b4:	4013      	ands	r3, r2
 80413b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80413b8:	683b      	ldr	r3, [r7, #0]
 80413ba:	691a      	ldr	r2, [r3, #16]
 80413bc:	69fb      	ldr	r3, [r7, #28]
 80413be:	f003 0307 	and.w	r3, r3, #7
 80413c2:	009b      	lsls	r3, r3, #2
 80413c4:	fa02 f303 	lsl.w	r3, r2, r3
 80413c8:	69ba      	ldr	r2, [r7, #24]
 80413ca:	4313      	orrs	r3, r2
 80413cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80413ce:	69fb      	ldr	r3, [r7, #28]
 80413d0:	08da      	lsrs	r2, r3, #3
 80413d2:	687b      	ldr	r3, [r7, #4]
 80413d4:	3208      	adds	r2, #8
 80413d6:	69b9      	ldr	r1, [r7, #24]
 80413d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80413dc:	687b      	ldr	r3, [r7, #4]
 80413de:	681b      	ldr	r3, [r3, #0]
 80413e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80413e2:	69fb      	ldr	r3, [r7, #28]
 80413e4:	005b      	lsls	r3, r3, #1
 80413e6:	2203      	movs	r2, #3
 80413e8:	fa02 f303 	lsl.w	r3, r2, r3
 80413ec:	43db      	mvns	r3, r3
 80413ee:	69ba      	ldr	r2, [r7, #24]
 80413f0:	4013      	ands	r3, r2
 80413f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80413f4:	683b      	ldr	r3, [r7, #0]
 80413f6:	685b      	ldr	r3, [r3, #4]
 80413f8:	f003 0203 	and.w	r2, r3, #3
 80413fc:	69fb      	ldr	r3, [r7, #28]
 80413fe:	005b      	lsls	r3, r3, #1
 8041400:	fa02 f303 	lsl.w	r3, r2, r3
 8041404:	69ba      	ldr	r2, [r7, #24]
 8041406:	4313      	orrs	r3, r2
 8041408:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 804140a:	687b      	ldr	r3, [r7, #4]
 804140c:	69ba      	ldr	r2, [r7, #24]
 804140e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8041410:	683b      	ldr	r3, [r7, #0]
 8041412:	685b      	ldr	r3, [r3, #4]
 8041414:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8041418:	2b00      	cmp	r3, #0
 804141a:	f000 80b4 	beq.w	8041586 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 804141e:	2300      	movs	r3, #0
 8041420:	60fb      	str	r3, [r7, #12]
 8041422:	4b60      	ldr	r3, [pc, #384]	; (80415a4 <HAL_GPIO_Init+0x30c>)
 8041424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8041426:	4a5f      	ldr	r2, [pc, #380]	; (80415a4 <HAL_GPIO_Init+0x30c>)
 8041428:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 804142c:	6453      	str	r3, [r2, #68]	; 0x44
 804142e:	4b5d      	ldr	r3, [pc, #372]	; (80415a4 <HAL_GPIO_Init+0x30c>)
 8041430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8041432:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8041436:	60fb      	str	r3, [r7, #12]
 8041438:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 804143a:	4a5b      	ldr	r2, [pc, #364]	; (80415a8 <HAL_GPIO_Init+0x310>)
 804143c:	69fb      	ldr	r3, [r7, #28]
 804143e:	089b      	lsrs	r3, r3, #2
 8041440:	3302      	adds	r3, #2
 8041442:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8041446:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8041448:	69fb      	ldr	r3, [r7, #28]
 804144a:	f003 0303 	and.w	r3, r3, #3
 804144e:	009b      	lsls	r3, r3, #2
 8041450:	220f      	movs	r2, #15
 8041452:	fa02 f303 	lsl.w	r3, r2, r3
 8041456:	43db      	mvns	r3, r3
 8041458:	69ba      	ldr	r2, [r7, #24]
 804145a:	4013      	ands	r3, r2
 804145c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 804145e:	687b      	ldr	r3, [r7, #4]
 8041460:	4a52      	ldr	r2, [pc, #328]	; (80415ac <HAL_GPIO_Init+0x314>)
 8041462:	4293      	cmp	r3, r2
 8041464:	d02b      	beq.n	80414be <HAL_GPIO_Init+0x226>
 8041466:	687b      	ldr	r3, [r7, #4]
 8041468:	4a51      	ldr	r2, [pc, #324]	; (80415b0 <HAL_GPIO_Init+0x318>)
 804146a:	4293      	cmp	r3, r2
 804146c:	d025      	beq.n	80414ba <HAL_GPIO_Init+0x222>
 804146e:	687b      	ldr	r3, [r7, #4]
 8041470:	4a50      	ldr	r2, [pc, #320]	; (80415b4 <HAL_GPIO_Init+0x31c>)
 8041472:	4293      	cmp	r3, r2
 8041474:	d01f      	beq.n	80414b6 <HAL_GPIO_Init+0x21e>
 8041476:	687b      	ldr	r3, [r7, #4]
 8041478:	4a4f      	ldr	r2, [pc, #316]	; (80415b8 <HAL_GPIO_Init+0x320>)
 804147a:	4293      	cmp	r3, r2
 804147c:	d019      	beq.n	80414b2 <HAL_GPIO_Init+0x21a>
 804147e:	687b      	ldr	r3, [r7, #4]
 8041480:	4a4e      	ldr	r2, [pc, #312]	; (80415bc <HAL_GPIO_Init+0x324>)
 8041482:	4293      	cmp	r3, r2
 8041484:	d013      	beq.n	80414ae <HAL_GPIO_Init+0x216>
 8041486:	687b      	ldr	r3, [r7, #4]
 8041488:	4a4d      	ldr	r2, [pc, #308]	; (80415c0 <HAL_GPIO_Init+0x328>)
 804148a:	4293      	cmp	r3, r2
 804148c:	d00d      	beq.n	80414aa <HAL_GPIO_Init+0x212>
 804148e:	687b      	ldr	r3, [r7, #4]
 8041490:	4a4c      	ldr	r2, [pc, #304]	; (80415c4 <HAL_GPIO_Init+0x32c>)
 8041492:	4293      	cmp	r3, r2
 8041494:	d007      	beq.n	80414a6 <HAL_GPIO_Init+0x20e>
 8041496:	687b      	ldr	r3, [r7, #4]
 8041498:	4a4b      	ldr	r2, [pc, #300]	; (80415c8 <HAL_GPIO_Init+0x330>)
 804149a:	4293      	cmp	r3, r2
 804149c:	d101      	bne.n	80414a2 <HAL_GPIO_Init+0x20a>
 804149e:	2307      	movs	r3, #7
 80414a0:	e00e      	b.n	80414c0 <HAL_GPIO_Init+0x228>
 80414a2:	2308      	movs	r3, #8
 80414a4:	e00c      	b.n	80414c0 <HAL_GPIO_Init+0x228>
 80414a6:	2306      	movs	r3, #6
 80414a8:	e00a      	b.n	80414c0 <HAL_GPIO_Init+0x228>
 80414aa:	2305      	movs	r3, #5
 80414ac:	e008      	b.n	80414c0 <HAL_GPIO_Init+0x228>
 80414ae:	2304      	movs	r3, #4
 80414b0:	e006      	b.n	80414c0 <HAL_GPIO_Init+0x228>
 80414b2:	2303      	movs	r3, #3
 80414b4:	e004      	b.n	80414c0 <HAL_GPIO_Init+0x228>
 80414b6:	2302      	movs	r3, #2
 80414b8:	e002      	b.n	80414c0 <HAL_GPIO_Init+0x228>
 80414ba:	2301      	movs	r3, #1
 80414bc:	e000      	b.n	80414c0 <HAL_GPIO_Init+0x228>
 80414be:	2300      	movs	r3, #0
 80414c0:	69fa      	ldr	r2, [r7, #28]
 80414c2:	f002 0203 	and.w	r2, r2, #3
 80414c6:	0092      	lsls	r2, r2, #2
 80414c8:	4093      	lsls	r3, r2
 80414ca:	69ba      	ldr	r2, [r7, #24]
 80414cc:	4313      	orrs	r3, r2
 80414ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80414d0:	4935      	ldr	r1, [pc, #212]	; (80415a8 <HAL_GPIO_Init+0x310>)
 80414d2:	69fb      	ldr	r3, [r7, #28]
 80414d4:	089b      	lsrs	r3, r3, #2
 80414d6:	3302      	adds	r3, #2
 80414d8:	69ba      	ldr	r2, [r7, #24]
 80414da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80414de:	4b3b      	ldr	r3, [pc, #236]	; (80415cc <HAL_GPIO_Init+0x334>)
 80414e0:	689b      	ldr	r3, [r3, #8]
 80414e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80414e4:	693b      	ldr	r3, [r7, #16]
 80414e6:	43db      	mvns	r3, r3
 80414e8:	69ba      	ldr	r2, [r7, #24]
 80414ea:	4013      	ands	r3, r2
 80414ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80414ee:	683b      	ldr	r3, [r7, #0]
 80414f0:	685b      	ldr	r3, [r3, #4]
 80414f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80414f6:	2b00      	cmp	r3, #0
 80414f8:	d003      	beq.n	8041502 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80414fa:	69ba      	ldr	r2, [r7, #24]
 80414fc:	693b      	ldr	r3, [r7, #16]
 80414fe:	4313      	orrs	r3, r2
 8041500:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8041502:	4a32      	ldr	r2, [pc, #200]	; (80415cc <HAL_GPIO_Init+0x334>)
 8041504:	69bb      	ldr	r3, [r7, #24]
 8041506:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8041508:	4b30      	ldr	r3, [pc, #192]	; (80415cc <HAL_GPIO_Init+0x334>)
 804150a:	68db      	ldr	r3, [r3, #12]
 804150c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 804150e:	693b      	ldr	r3, [r7, #16]
 8041510:	43db      	mvns	r3, r3
 8041512:	69ba      	ldr	r2, [r7, #24]
 8041514:	4013      	ands	r3, r2
 8041516:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8041518:	683b      	ldr	r3, [r7, #0]
 804151a:	685b      	ldr	r3, [r3, #4]
 804151c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8041520:	2b00      	cmp	r3, #0
 8041522:	d003      	beq.n	804152c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8041524:	69ba      	ldr	r2, [r7, #24]
 8041526:	693b      	ldr	r3, [r7, #16]
 8041528:	4313      	orrs	r3, r2
 804152a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 804152c:	4a27      	ldr	r2, [pc, #156]	; (80415cc <HAL_GPIO_Init+0x334>)
 804152e:	69bb      	ldr	r3, [r7, #24]
 8041530:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8041532:	4b26      	ldr	r3, [pc, #152]	; (80415cc <HAL_GPIO_Init+0x334>)
 8041534:	685b      	ldr	r3, [r3, #4]
 8041536:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8041538:	693b      	ldr	r3, [r7, #16]
 804153a:	43db      	mvns	r3, r3
 804153c:	69ba      	ldr	r2, [r7, #24]
 804153e:	4013      	ands	r3, r2
 8041540:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8041542:	683b      	ldr	r3, [r7, #0]
 8041544:	685b      	ldr	r3, [r3, #4]
 8041546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 804154a:	2b00      	cmp	r3, #0
 804154c:	d003      	beq.n	8041556 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 804154e:	69ba      	ldr	r2, [r7, #24]
 8041550:	693b      	ldr	r3, [r7, #16]
 8041552:	4313      	orrs	r3, r2
 8041554:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8041556:	4a1d      	ldr	r2, [pc, #116]	; (80415cc <HAL_GPIO_Init+0x334>)
 8041558:	69bb      	ldr	r3, [r7, #24]
 804155a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 804155c:	4b1b      	ldr	r3, [pc, #108]	; (80415cc <HAL_GPIO_Init+0x334>)
 804155e:	681b      	ldr	r3, [r3, #0]
 8041560:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8041562:	693b      	ldr	r3, [r7, #16]
 8041564:	43db      	mvns	r3, r3
 8041566:	69ba      	ldr	r2, [r7, #24]
 8041568:	4013      	ands	r3, r2
 804156a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 804156c:	683b      	ldr	r3, [r7, #0]
 804156e:	685b      	ldr	r3, [r3, #4]
 8041570:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8041574:	2b00      	cmp	r3, #0
 8041576:	d003      	beq.n	8041580 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8041578:	69ba      	ldr	r2, [r7, #24]
 804157a:	693b      	ldr	r3, [r7, #16]
 804157c:	4313      	orrs	r3, r2
 804157e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8041580:	4a12      	ldr	r2, [pc, #72]	; (80415cc <HAL_GPIO_Init+0x334>)
 8041582:	69bb      	ldr	r3, [r7, #24]
 8041584:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8041586:	69fb      	ldr	r3, [r7, #28]
 8041588:	3301      	adds	r3, #1
 804158a:	61fb      	str	r3, [r7, #28]
 804158c:	69fb      	ldr	r3, [r7, #28]
 804158e:	2b0f      	cmp	r3, #15
 8041590:	f67f ae90 	bls.w	80412b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8041594:	bf00      	nop
 8041596:	bf00      	nop
 8041598:	3724      	adds	r7, #36	; 0x24
 804159a:	46bd      	mov	sp, r7
 804159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80415a0:	4770      	bx	lr
 80415a2:	bf00      	nop
 80415a4:	40023800 	.word	0x40023800
 80415a8:	40013800 	.word	0x40013800
 80415ac:	40020000 	.word	0x40020000
 80415b0:	40020400 	.word	0x40020400
 80415b4:	40020800 	.word	0x40020800
 80415b8:	40020c00 	.word	0x40020c00
 80415bc:	40021000 	.word	0x40021000
 80415c0:	40021400 	.word	0x40021400
 80415c4:	40021800 	.word	0x40021800
 80415c8:	40021c00 	.word	0x40021c00
 80415cc:	40013c00 	.word	0x40013c00

080415d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80415d0:	b480      	push	{r7}
 80415d2:	b083      	sub	sp, #12
 80415d4:	af00      	add	r7, sp, #0
 80415d6:	6078      	str	r0, [r7, #4]
 80415d8:	460b      	mov	r3, r1
 80415da:	807b      	strh	r3, [r7, #2]
 80415dc:	4613      	mov	r3, r2
 80415de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80415e0:	787b      	ldrb	r3, [r7, #1]
 80415e2:	2b00      	cmp	r3, #0
 80415e4:	d003      	beq.n	80415ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80415e6:	887a      	ldrh	r2, [r7, #2]
 80415e8:	687b      	ldr	r3, [r7, #4]
 80415ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80415ec:	e003      	b.n	80415f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80415ee:	887b      	ldrh	r3, [r7, #2]
 80415f0:	041a      	lsls	r2, r3, #16
 80415f2:	687b      	ldr	r3, [r7, #4]
 80415f4:	619a      	str	r2, [r3, #24]
}
 80415f6:	bf00      	nop
 80415f8:	370c      	adds	r7, #12
 80415fa:	46bd      	mov	sp, r7
 80415fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041600:	4770      	bx	lr

08041602 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8041602:	b480      	push	{r7}
 8041604:	b085      	sub	sp, #20
 8041606:	af00      	add	r7, sp, #0
 8041608:	6078      	str	r0, [r7, #4]
 804160a:	460b      	mov	r3, r1
 804160c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 804160e:	687b      	ldr	r3, [r7, #4]
 8041610:	695b      	ldr	r3, [r3, #20]
 8041612:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8041614:	887a      	ldrh	r2, [r7, #2]
 8041616:	68fb      	ldr	r3, [r7, #12]
 8041618:	4013      	ands	r3, r2
 804161a:	041a      	lsls	r2, r3, #16
 804161c:	68fb      	ldr	r3, [r7, #12]
 804161e:	43d9      	mvns	r1, r3
 8041620:	887b      	ldrh	r3, [r7, #2]
 8041622:	400b      	ands	r3, r1
 8041624:	431a      	orrs	r2, r3
 8041626:	687b      	ldr	r3, [r7, #4]
 8041628:	619a      	str	r2, [r3, #24]
}
 804162a:	bf00      	nop
 804162c:	3714      	adds	r7, #20
 804162e:	46bd      	mov	sp, r7
 8041630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041634:	4770      	bx	lr
	...

08041638 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8041638:	b580      	push	{r7, lr}
 804163a:	b086      	sub	sp, #24
 804163c:	af00      	add	r7, sp, #0
 804163e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8041640:	687b      	ldr	r3, [r7, #4]
 8041642:	2b00      	cmp	r3, #0
 8041644:	d101      	bne.n	804164a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8041646:	2301      	movs	r3, #1
 8041648:	e267      	b.n	8041b1a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 804164a:	687b      	ldr	r3, [r7, #4]
 804164c:	681b      	ldr	r3, [r3, #0]
 804164e:	f003 0301 	and.w	r3, r3, #1
 8041652:	2b00      	cmp	r3, #0
 8041654:	d075      	beq.n	8041742 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8041656:	4b88      	ldr	r3, [pc, #544]	; (8041878 <HAL_RCC_OscConfig+0x240>)
 8041658:	689b      	ldr	r3, [r3, #8]
 804165a:	f003 030c 	and.w	r3, r3, #12
 804165e:	2b04      	cmp	r3, #4
 8041660:	d00c      	beq.n	804167c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8041662:	4b85      	ldr	r3, [pc, #532]	; (8041878 <HAL_RCC_OscConfig+0x240>)
 8041664:	689b      	ldr	r3, [r3, #8]
 8041666:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 804166a:	2b08      	cmp	r3, #8
 804166c:	d112      	bne.n	8041694 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 804166e:	4b82      	ldr	r3, [pc, #520]	; (8041878 <HAL_RCC_OscConfig+0x240>)
 8041670:	685b      	ldr	r3, [r3, #4]
 8041672:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8041676:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 804167a:	d10b      	bne.n	8041694 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 804167c:	4b7e      	ldr	r3, [pc, #504]	; (8041878 <HAL_RCC_OscConfig+0x240>)
 804167e:	681b      	ldr	r3, [r3, #0]
 8041680:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8041684:	2b00      	cmp	r3, #0
 8041686:	d05b      	beq.n	8041740 <HAL_RCC_OscConfig+0x108>
 8041688:	687b      	ldr	r3, [r7, #4]
 804168a:	685b      	ldr	r3, [r3, #4]
 804168c:	2b00      	cmp	r3, #0
 804168e:	d157      	bne.n	8041740 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8041690:	2301      	movs	r3, #1
 8041692:	e242      	b.n	8041b1a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8041694:	687b      	ldr	r3, [r7, #4]
 8041696:	685b      	ldr	r3, [r3, #4]
 8041698:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 804169c:	d106      	bne.n	80416ac <HAL_RCC_OscConfig+0x74>
 804169e:	4b76      	ldr	r3, [pc, #472]	; (8041878 <HAL_RCC_OscConfig+0x240>)
 80416a0:	681b      	ldr	r3, [r3, #0]
 80416a2:	4a75      	ldr	r2, [pc, #468]	; (8041878 <HAL_RCC_OscConfig+0x240>)
 80416a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80416a8:	6013      	str	r3, [r2, #0]
 80416aa:	e01d      	b.n	80416e8 <HAL_RCC_OscConfig+0xb0>
 80416ac:	687b      	ldr	r3, [r7, #4]
 80416ae:	685b      	ldr	r3, [r3, #4]
 80416b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80416b4:	d10c      	bne.n	80416d0 <HAL_RCC_OscConfig+0x98>
 80416b6:	4b70      	ldr	r3, [pc, #448]	; (8041878 <HAL_RCC_OscConfig+0x240>)
 80416b8:	681b      	ldr	r3, [r3, #0]
 80416ba:	4a6f      	ldr	r2, [pc, #444]	; (8041878 <HAL_RCC_OscConfig+0x240>)
 80416bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80416c0:	6013      	str	r3, [r2, #0]
 80416c2:	4b6d      	ldr	r3, [pc, #436]	; (8041878 <HAL_RCC_OscConfig+0x240>)
 80416c4:	681b      	ldr	r3, [r3, #0]
 80416c6:	4a6c      	ldr	r2, [pc, #432]	; (8041878 <HAL_RCC_OscConfig+0x240>)
 80416c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80416cc:	6013      	str	r3, [r2, #0]
 80416ce:	e00b      	b.n	80416e8 <HAL_RCC_OscConfig+0xb0>
 80416d0:	4b69      	ldr	r3, [pc, #420]	; (8041878 <HAL_RCC_OscConfig+0x240>)
 80416d2:	681b      	ldr	r3, [r3, #0]
 80416d4:	4a68      	ldr	r2, [pc, #416]	; (8041878 <HAL_RCC_OscConfig+0x240>)
 80416d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80416da:	6013      	str	r3, [r2, #0]
 80416dc:	4b66      	ldr	r3, [pc, #408]	; (8041878 <HAL_RCC_OscConfig+0x240>)
 80416de:	681b      	ldr	r3, [r3, #0]
 80416e0:	4a65      	ldr	r2, [pc, #404]	; (8041878 <HAL_RCC_OscConfig+0x240>)
 80416e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80416e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80416e8:	687b      	ldr	r3, [r7, #4]
 80416ea:	685b      	ldr	r3, [r3, #4]
 80416ec:	2b00      	cmp	r3, #0
 80416ee:	d013      	beq.n	8041718 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80416f0:	f7ff fa08 	bl	8040b04 <HAL_GetTick>
 80416f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80416f6:	e008      	b.n	804170a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80416f8:	f7ff fa04 	bl	8040b04 <HAL_GetTick>
 80416fc:	4602      	mov	r2, r0
 80416fe:	693b      	ldr	r3, [r7, #16]
 8041700:	1ad3      	subs	r3, r2, r3
 8041702:	2b64      	cmp	r3, #100	; 0x64
 8041704:	d901      	bls.n	804170a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8041706:	2303      	movs	r3, #3
 8041708:	e207      	b.n	8041b1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 804170a:	4b5b      	ldr	r3, [pc, #364]	; (8041878 <HAL_RCC_OscConfig+0x240>)
 804170c:	681b      	ldr	r3, [r3, #0]
 804170e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8041712:	2b00      	cmp	r3, #0
 8041714:	d0f0      	beq.n	80416f8 <HAL_RCC_OscConfig+0xc0>
 8041716:	e014      	b.n	8041742 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8041718:	f7ff f9f4 	bl	8040b04 <HAL_GetTick>
 804171c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 804171e:	e008      	b.n	8041732 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8041720:	f7ff f9f0 	bl	8040b04 <HAL_GetTick>
 8041724:	4602      	mov	r2, r0
 8041726:	693b      	ldr	r3, [r7, #16]
 8041728:	1ad3      	subs	r3, r2, r3
 804172a:	2b64      	cmp	r3, #100	; 0x64
 804172c:	d901      	bls.n	8041732 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 804172e:	2303      	movs	r3, #3
 8041730:	e1f3      	b.n	8041b1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8041732:	4b51      	ldr	r3, [pc, #324]	; (8041878 <HAL_RCC_OscConfig+0x240>)
 8041734:	681b      	ldr	r3, [r3, #0]
 8041736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 804173a:	2b00      	cmp	r3, #0
 804173c:	d1f0      	bne.n	8041720 <HAL_RCC_OscConfig+0xe8>
 804173e:	e000      	b.n	8041742 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8041740:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8041742:	687b      	ldr	r3, [r7, #4]
 8041744:	681b      	ldr	r3, [r3, #0]
 8041746:	f003 0302 	and.w	r3, r3, #2
 804174a:	2b00      	cmp	r3, #0
 804174c:	d063      	beq.n	8041816 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 804174e:	4b4a      	ldr	r3, [pc, #296]	; (8041878 <HAL_RCC_OscConfig+0x240>)
 8041750:	689b      	ldr	r3, [r3, #8]
 8041752:	f003 030c 	and.w	r3, r3, #12
 8041756:	2b00      	cmp	r3, #0
 8041758:	d00b      	beq.n	8041772 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 804175a:	4b47      	ldr	r3, [pc, #284]	; (8041878 <HAL_RCC_OscConfig+0x240>)
 804175c:	689b      	ldr	r3, [r3, #8]
 804175e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8041762:	2b08      	cmp	r3, #8
 8041764:	d11c      	bne.n	80417a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8041766:	4b44      	ldr	r3, [pc, #272]	; (8041878 <HAL_RCC_OscConfig+0x240>)
 8041768:	685b      	ldr	r3, [r3, #4]
 804176a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 804176e:	2b00      	cmp	r3, #0
 8041770:	d116      	bne.n	80417a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8041772:	4b41      	ldr	r3, [pc, #260]	; (8041878 <HAL_RCC_OscConfig+0x240>)
 8041774:	681b      	ldr	r3, [r3, #0]
 8041776:	f003 0302 	and.w	r3, r3, #2
 804177a:	2b00      	cmp	r3, #0
 804177c:	d005      	beq.n	804178a <HAL_RCC_OscConfig+0x152>
 804177e:	687b      	ldr	r3, [r7, #4]
 8041780:	68db      	ldr	r3, [r3, #12]
 8041782:	2b01      	cmp	r3, #1
 8041784:	d001      	beq.n	804178a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8041786:	2301      	movs	r3, #1
 8041788:	e1c7      	b.n	8041b1a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 804178a:	4b3b      	ldr	r3, [pc, #236]	; (8041878 <HAL_RCC_OscConfig+0x240>)
 804178c:	681b      	ldr	r3, [r3, #0]
 804178e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8041792:	687b      	ldr	r3, [r7, #4]
 8041794:	691b      	ldr	r3, [r3, #16]
 8041796:	00db      	lsls	r3, r3, #3
 8041798:	4937      	ldr	r1, [pc, #220]	; (8041878 <HAL_RCC_OscConfig+0x240>)
 804179a:	4313      	orrs	r3, r2
 804179c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 804179e:	e03a      	b.n	8041816 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80417a0:	687b      	ldr	r3, [r7, #4]
 80417a2:	68db      	ldr	r3, [r3, #12]
 80417a4:	2b00      	cmp	r3, #0
 80417a6:	d020      	beq.n	80417ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80417a8:	4b34      	ldr	r3, [pc, #208]	; (804187c <HAL_RCC_OscConfig+0x244>)
 80417aa:	2201      	movs	r2, #1
 80417ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80417ae:	f7ff f9a9 	bl	8040b04 <HAL_GetTick>
 80417b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80417b4:	e008      	b.n	80417c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80417b6:	f7ff f9a5 	bl	8040b04 <HAL_GetTick>
 80417ba:	4602      	mov	r2, r0
 80417bc:	693b      	ldr	r3, [r7, #16]
 80417be:	1ad3      	subs	r3, r2, r3
 80417c0:	2b02      	cmp	r3, #2
 80417c2:	d901      	bls.n	80417c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80417c4:	2303      	movs	r3, #3
 80417c6:	e1a8      	b.n	8041b1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80417c8:	4b2b      	ldr	r3, [pc, #172]	; (8041878 <HAL_RCC_OscConfig+0x240>)
 80417ca:	681b      	ldr	r3, [r3, #0]
 80417cc:	f003 0302 	and.w	r3, r3, #2
 80417d0:	2b00      	cmp	r3, #0
 80417d2:	d0f0      	beq.n	80417b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80417d4:	4b28      	ldr	r3, [pc, #160]	; (8041878 <HAL_RCC_OscConfig+0x240>)
 80417d6:	681b      	ldr	r3, [r3, #0]
 80417d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80417dc:	687b      	ldr	r3, [r7, #4]
 80417de:	691b      	ldr	r3, [r3, #16]
 80417e0:	00db      	lsls	r3, r3, #3
 80417e2:	4925      	ldr	r1, [pc, #148]	; (8041878 <HAL_RCC_OscConfig+0x240>)
 80417e4:	4313      	orrs	r3, r2
 80417e6:	600b      	str	r3, [r1, #0]
 80417e8:	e015      	b.n	8041816 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80417ea:	4b24      	ldr	r3, [pc, #144]	; (804187c <HAL_RCC_OscConfig+0x244>)
 80417ec:	2200      	movs	r2, #0
 80417ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80417f0:	f7ff f988 	bl	8040b04 <HAL_GetTick>
 80417f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80417f6:	e008      	b.n	804180a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80417f8:	f7ff f984 	bl	8040b04 <HAL_GetTick>
 80417fc:	4602      	mov	r2, r0
 80417fe:	693b      	ldr	r3, [r7, #16]
 8041800:	1ad3      	subs	r3, r2, r3
 8041802:	2b02      	cmp	r3, #2
 8041804:	d901      	bls.n	804180a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8041806:	2303      	movs	r3, #3
 8041808:	e187      	b.n	8041b1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 804180a:	4b1b      	ldr	r3, [pc, #108]	; (8041878 <HAL_RCC_OscConfig+0x240>)
 804180c:	681b      	ldr	r3, [r3, #0]
 804180e:	f003 0302 	and.w	r3, r3, #2
 8041812:	2b00      	cmp	r3, #0
 8041814:	d1f0      	bne.n	80417f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8041816:	687b      	ldr	r3, [r7, #4]
 8041818:	681b      	ldr	r3, [r3, #0]
 804181a:	f003 0308 	and.w	r3, r3, #8
 804181e:	2b00      	cmp	r3, #0
 8041820:	d036      	beq.n	8041890 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8041822:	687b      	ldr	r3, [r7, #4]
 8041824:	695b      	ldr	r3, [r3, #20]
 8041826:	2b00      	cmp	r3, #0
 8041828:	d016      	beq.n	8041858 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 804182a:	4b15      	ldr	r3, [pc, #84]	; (8041880 <HAL_RCC_OscConfig+0x248>)
 804182c:	2201      	movs	r2, #1
 804182e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041830:	f7ff f968 	bl	8040b04 <HAL_GetTick>
 8041834:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8041836:	e008      	b.n	804184a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8041838:	f7ff f964 	bl	8040b04 <HAL_GetTick>
 804183c:	4602      	mov	r2, r0
 804183e:	693b      	ldr	r3, [r7, #16]
 8041840:	1ad3      	subs	r3, r2, r3
 8041842:	2b02      	cmp	r3, #2
 8041844:	d901      	bls.n	804184a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8041846:	2303      	movs	r3, #3
 8041848:	e167      	b.n	8041b1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 804184a:	4b0b      	ldr	r3, [pc, #44]	; (8041878 <HAL_RCC_OscConfig+0x240>)
 804184c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 804184e:	f003 0302 	and.w	r3, r3, #2
 8041852:	2b00      	cmp	r3, #0
 8041854:	d0f0      	beq.n	8041838 <HAL_RCC_OscConfig+0x200>
 8041856:	e01b      	b.n	8041890 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8041858:	4b09      	ldr	r3, [pc, #36]	; (8041880 <HAL_RCC_OscConfig+0x248>)
 804185a:	2200      	movs	r2, #0
 804185c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 804185e:	f7ff f951 	bl	8040b04 <HAL_GetTick>
 8041862:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8041864:	e00e      	b.n	8041884 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8041866:	f7ff f94d 	bl	8040b04 <HAL_GetTick>
 804186a:	4602      	mov	r2, r0
 804186c:	693b      	ldr	r3, [r7, #16]
 804186e:	1ad3      	subs	r3, r2, r3
 8041870:	2b02      	cmp	r3, #2
 8041872:	d907      	bls.n	8041884 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8041874:	2303      	movs	r3, #3
 8041876:	e150      	b.n	8041b1a <HAL_RCC_OscConfig+0x4e2>
 8041878:	40023800 	.word	0x40023800
 804187c:	42470000 	.word	0x42470000
 8041880:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8041884:	4b88      	ldr	r3, [pc, #544]	; (8041aa8 <HAL_RCC_OscConfig+0x470>)
 8041886:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8041888:	f003 0302 	and.w	r3, r3, #2
 804188c:	2b00      	cmp	r3, #0
 804188e:	d1ea      	bne.n	8041866 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8041890:	687b      	ldr	r3, [r7, #4]
 8041892:	681b      	ldr	r3, [r3, #0]
 8041894:	f003 0304 	and.w	r3, r3, #4
 8041898:	2b00      	cmp	r3, #0
 804189a:	f000 8097 	beq.w	80419cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 804189e:	2300      	movs	r3, #0
 80418a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80418a2:	4b81      	ldr	r3, [pc, #516]	; (8041aa8 <HAL_RCC_OscConfig+0x470>)
 80418a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80418a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80418aa:	2b00      	cmp	r3, #0
 80418ac:	d10f      	bne.n	80418ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80418ae:	2300      	movs	r3, #0
 80418b0:	60bb      	str	r3, [r7, #8]
 80418b2:	4b7d      	ldr	r3, [pc, #500]	; (8041aa8 <HAL_RCC_OscConfig+0x470>)
 80418b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80418b6:	4a7c      	ldr	r2, [pc, #496]	; (8041aa8 <HAL_RCC_OscConfig+0x470>)
 80418b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80418bc:	6413      	str	r3, [r2, #64]	; 0x40
 80418be:	4b7a      	ldr	r3, [pc, #488]	; (8041aa8 <HAL_RCC_OscConfig+0x470>)
 80418c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80418c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80418c6:	60bb      	str	r3, [r7, #8]
 80418c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80418ca:	2301      	movs	r3, #1
 80418cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80418ce:	4b77      	ldr	r3, [pc, #476]	; (8041aac <HAL_RCC_OscConfig+0x474>)
 80418d0:	681b      	ldr	r3, [r3, #0]
 80418d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80418d6:	2b00      	cmp	r3, #0
 80418d8:	d118      	bne.n	804190c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80418da:	4b74      	ldr	r3, [pc, #464]	; (8041aac <HAL_RCC_OscConfig+0x474>)
 80418dc:	681b      	ldr	r3, [r3, #0]
 80418de:	4a73      	ldr	r2, [pc, #460]	; (8041aac <HAL_RCC_OscConfig+0x474>)
 80418e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80418e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80418e6:	f7ff f90d 	bl	8040b04 <HAL_GetTick>
 80418ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80418ec:	e008      	b.n	8041900 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80418ee:	f7ff f909 	bl	8040b04 <HAL_GetTick>
 80418f2:	4602      	mov	r2, r0
 80418f4:	693b      	ldr	r3, [r7, #16]
 80418f6:	1ad3      	subs	r3, r2, r3
 80418f8:	2b02      	cmp	r3, #2
 80418fa:	d901      	bls.n	8041900 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80418fc:	2303      	movs	r3, #3
 80418fe:	e10c      	b.n	8041b1a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8041900:	4b6a      	ldr	r3, [pc, #424]	; (8041aac <HAL_RCC_OscConfig+0x474>)
 8041902:	681b      	ldr	r3, [r3, #0]
 8041904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8041908:	2b00      	cmp	r3, #0
 804190a:	d0f0      	beq.n	80418ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 804190c:	687b      	ldr	r3, [r7, #4]
 804190e:	689b      	ldr	r3, [r3, #8]
 8041910:	2b01      	cmp	r3, #1
 8041912:	d106      	bne.n	8041922 <HAL_RCC_OscConfig+0x2ea>
 8041914:	4b64      	ldr	r3, [pc, #400]	; (8041aa8 <HAL_RCC_OscConfig+0x470>)
 8041916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041918:	4a63      	ldr	r2, [pc, #396]	; (8041aa8 <HAL_RCC_OscConfig+0x470>)
 804191a:	f043 0301 	orr.w	r3, r3, #1
 804191e:	6713      	str	r3, [r2, #112]	; 0x70
 8041920:	e01c      	b.n	804195c <HAL_RCC_OscConfig+0x324>
 8041922:	687b      	ldr	r3, [r7, #4]
 8041924:	689b      	ldr	r3, [r3, #8]
 8041926:	2b05      	cmp	r3, #5
 8041928:	d10c      	bne.n	8041944 <HAL_RCC_OscConfig+0x30c>
 804192a:	4b5f      	ldr	r3, [pc, #380]	; (8041aa8 <HAL_RCC_OscConfig+0x470>)
 804192c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804192e:	4a5e      	ldr	r2, [pc, #376]	; (8041aa8 <HAL_RCC_OscConfig+0x470>)
 8041930:	f043 0304 	orr.w	r3, r3, #4
 8041934:	6713      	str	r3, [r2, #112]	; 0x70
 8041936:	4b5c      	ldr	r3, [pc, #368]	; (8041aa8 <HAL_RCC_OscConfig+0x470>)
 8041938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804193a:	4a5b      	ldr	r2, [pc, #364]	; (8041aa8 <HAL_RCC_OscConfig+0x470>)
 804193c:	f043 0301 	orr.w	r3, r3, #1
 8041940:	6713      	str	r3, [r2, #112]	; 0x70
 8041942:	e00b      	b.n	804195c <HAL_RCC_OscConfig+0x324>
 8041944:	4b58      	ldr	r3, [pc, #352]	; (8041aa8 <HAL_RCC_OscConfig+0x470>)
 8041946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041948:	4a57      	ldr	r2, [pc, #348]	; (8041aa8 <HAL_RCC_OscConfig+0x470>)
 804194a:	f023 0301 	bic.w	r3, r3, #1
 804194e:	6713      	str	r3, [r2, #112]	; 0x70
 8041950:	4b55      	ldr	r3, [pc, #340]	; (8041aa8 <HAL_RCC_OscConfig+0x470>)
 8041952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041954:	4a54      	ldr	r2, [pc, #336]	; (8041aa8 <HAL_RCC_OscConfig+0x470>)
 8041956:	f023 0304 	bic.w	r3, r3, #4
 804195a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 804195c:	687b      	ldr	r3, [r7, #4]
 804195e:	689b      	ldr	r3, [r3, #8]
 8041960:	2b00      	cmp	r3, #0
 8041962:	d015      	beq.n	8041990 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041964:	f7ff f8ce 	bl	8040b04 <HAL_GetTick>
 8041968:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 804196a:	e00a      	b.n	8041982 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 804196c:	f7ff f8ca 	bl	8040b04 <HAL_GetTick>
 8041970:	4602      	mov	r2, r0
 8041972:	693b      	ldr	r3, [r7, #16]
 8041974:	1ad3      	subs	r3, r2, r3
 8041976:	f241 3288 	movw	r2, #5000	; 0x1388
 804197a:	4293      	cmp	r3, r2
 804197c:	d901      	bls.n	8041982 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 804197e:	2303      	movs	r3, #3
 8041980:	e0cb      	b.n	8041b1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8041982:	4b49      	ldr	r3, [pc, #292]	; (8041aa8 <HAL_RCC_OscConfig+0x470>)
 8041984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041986:	f003 0302 	and.w	r3, r3, #2
 804198a:	2b00      	cmp	r3, #0
 804198c:	d0ee      	beq.n	804196c <HAL_RCC_OscConfig+0x334>
 804198e:	e014      	b.n	80419ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8041990:	f7ff f8b8 	bl	8040b04 <HAL_GetTick>
 8041994:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8041996:	e00a      	b.n	80419ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8041998:	f7ff f8b4 	bl	8040b04 <HAL_GetTick>
 804199c:	4602      	mov	r2, r0
 804199e:	693b      	ldr	r3, [r7, #16]
 80419a0:	1ad3      	subs	r3, r2, r3
 80419a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80419a6:	4293      	cmp	r3, r2
 80419a8:	d901      	bls.n	80419ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80419aa:	2303      	movs	r3, #3
 80419ac:	e0b5      	b.n	8041b1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80419ae:	4b3e      	ldr	r3, [pc, #248]	; (8041aa8 <HAL_RCC_OscConfig+0x470>)
 80419b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80419b2:	f003 0302 	and.w	r3, r3, #2
 80419b6:	2b00      	cmp	r3, #0
 80419b8:	d1ee      	bne.n	8041998 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80419ba:	7dfb      	ldrb	r3, [r7, #23]
 80419bc:	2b01      	cmp	r3, #1
 80419be:	d105      	bne.n	80419cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80419c0:	4b39      	ldr	r3, [pc, #228]	; (8041aa8 <HAL_RCC_OscConfig+0x470>)
 80419c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80419c4:	4a38      	ldr	r2, [pc, #224]	; (8041aa8 <HAL_RCC_OscConfig+0x470>)
 80419c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80419ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80419cc:	687b      	ldr	r3, [r7, #4]
 80419ce:	699b      	ldr	r3, [r3, #24]
 80419d0:	2b00      	cmp	r3, #0
 80419d2:	f000 80a1 	beq.w	8041b18 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80419d6:	4b34      	ldr	r3, [pc, #208]	; (8041aa8 <HAL_RCC_OscConfig+0x470>)
 80419d8:	689b      	ldr	r3, [r3, #8]
 80419da:	f003 030c 	and.w	r3, r3, #12
 80419de:	2b08      	cmp	r3, #8
 80419e0:	d05c      	beq.n	8041a9c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80419e2:	687b      	ldr	r3, [r7, #4]
 80419e4:	699b      	ldr	r3, [r3, #24]
 80419e6:	2b02      	cmp	r3, #2
 80419e8:	d141      	bne.n	8041a6e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80419ea:	4b31      	ldr	r3, [pc, #196]	; (8041ab0 <HAL_RCC_OscConfig+0x478>)
 80419ec:	2200      	movs	r2, #0
 80419ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80419f0:	f7ff f888 	bl	8040b04 <HAL_GetTick>
 80419f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80419f6:	e008      	b.n	8041a0a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80419f8:	f7ff f884 	bl	8040b04 <HAL_GetTick>
 80419fc:	4602      	mov	r2, r0
 80419fe:	693b      	ldr	r3, [r7, #16]
 8041a00:	1ad3      	subs	r3, r2, r3
 8041a02:	2b02      	cmp	r3, #2
 8041a04:	d901      	bls.n	8041a0a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8041a06:	2303      	movs	r3, #3
 8041a08:	e087      	b.n	8041b1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8041a0a:	4b27      	ldr	r3, [pc, #156]	; (8041aa8 <HAL_RCC_OscConfig+0x470>)
 8041a0c:	681b      	ldr	r3, [r3, #0]
 8041a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8041a12:	2b00      	cmp	r3, #0
 8041a14:	d1f0      	bne.n	80419f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8041a16:	687b      	ldr	r3, [r7, #4]
 8041a18:	69da      	ldr	r2, [r3, #28]
 8041a1a:	687b      	ldr	r3, [r7, #4]
 8041a1c:	6a1b      	ldr	r3, [r3, #32]
 8041a1e:	431a      	orrs	r2, r3
 8041a20:	687b      	ldr	r3, [r7, #4]
 8041a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8041a24:	019b      	lsls	r3, r3, #6
 8041a26:	431a      	orrs	r2, r3
 8041a28:	687b      	ldr	r3, [r7, #4]
 8041a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8041a2c:	085b      	lsrs	r3, r3, #1
 8041a2e:	3b01      	subs	r3, #1
 8041a30:	041b      	lsls	r3, r3, #16
 8041a32:	431a      	orrs	r2, r3
 8041a34:	687b      	ldr	r3, [r7, #4]
 8041a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8041a38:	061b      	lsls	r3, r3, #24
 8041a3a:	491b      	ldr	r1, [pc, #108]	; (8041aa8 <HAL_RCC_OscConfig+0x470>)
 8041a3c:	4313      	orrs	r3, r2
 8041a3e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8041a40:	4b1b      	ldr	r3, [pc, #108]	; (8041ab0 <HAL_RCC_OscConfig+0x478>)
 8041a42:	2201      	movs	r2, #1
 8041a44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8041a46:	f7ff f85d 	bl	8040b04 <HAL_GetTick>
 8041a4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8041a4c:	e008      	b.n	8041a60 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8041a4e:	f7ff f859 	bl	8040b04 <HAL_GetTick>
 8041a52:	4602      	mov	r2, r0
 8041a54:	693b      	ldr	r3, [r7, #16]
 8041a56:	1ad3      	subs	r3, r2, r3
 8041a58:	2b02      	cmp	r3, #2
 8041a5a:	d901      	bls.n	8041a60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8041a5c:	2303      	movs	r3, #3
 8041a5e:	e05c      	b.n	8041b1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8041a60:	4b11      	ldr	r3, [pc, #68]	; (8041aa8 <HAL_RCC_OscConfig+0x470>)
 8041a62:	681b      	ldr	r3, [r3, #0]
 8041a64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8041a68:	2b00      	cmp	r3, #0
 8041a6a:	d0f0      	beq.n	8041a4e <HAL_RCC_OscConfig+0x416>
 8041a6c:	e054      	b.n	8041b18 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8041a6e:	4b10      	ldr	r3, [pc, #64]	; (8041ab0 <HAL_RCC_OscConfig+0x478>)
 8041a70:	2200      	movs	r2, #0
 8041a72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8041a74:	f7ff f846 	bl	8040b04 <HAL_GetTick>
 8041a78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8041a7a:	e008      	b.n	8041a8e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8041a7c:	f7ff f842 	bl	8040b04 <HAL_GetTick>
 8041a80:	4602      	mov	r2, r0
 8041a82:	693b      	ldr	r3, [r7, #16]
 8041a84:	1ad3      	subs	r3, r2, r3
 8041a86:	2b02      	cmp	r3, #2
 8041a88:	d901      	bls.n	8041a8e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8041a8a:	2303      	movs	r3, #3
 8041a8c:	e045      	b.n	8041b1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8041a8e:	4b06      	ldr	r3, [pc, #24]	; (8041aa8 <HAL_RCC_OscConfig+0x470>)
 8041a90:	681b      	ldr	r3, [r3, #0]
 8041a92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8041a96:	2b00      	cmp	r3, #0
 8041a98:	d1f0      	bne.n	8041a7c <HAL_RCC_OscConfig+0x444>
 8041a9a:	e03d      	b.n	8041b18 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8041a9c:	687b      	ldr	r3, [r7, #4]
 8041a9e:	699b      	ldr	r3, [r3, #24]
 8041aa0:	2b01      	cmp	r3, #1
 8041aa2:	d107      	bne.n	8041ab4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8041aa4:	2301      	movs	r3, #1
 8041aa6:	e038      	b.n	8041b1a <HAL_RCC_OscConfig+0x4e2>
 8041aa8:	40023800 	.word	0x40023800
 8041aac:	40007000 	.word	0x40007000
 8041ab0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8041ab4:	4b1b      	ldr	r3, [pc, #108]	; (8041b24 <HAL_RCC_OscConfig+0x4ec>)
 8041ab6:	685b      	ldr	r3, [r3, #4]
 8041ab8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8041aba:	687b      	ldr	r3, [r7, #4]
 8041abc:	699b      	ldr	r3, [r3, #24]
 8041abe:	2b01      	cmp	r3, #1
 8041ac0:	d028      	beq.n	8041b14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8041ac2:	68fb      	ldr	r3, [r7, #12]
 8041ac4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8041ac8:	687b      	ldr	r3, [r7, #4]
 8041aca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8041acc:	429a      	cmp	r2, r3
 8041ace:	d121      	bne.n	8041b14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8041ad0:	68fb      	ldr	r3, [r7, #12]
 8041ad2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8041ad6:	687b      	ldr	r3, [r7, #4]
 8041ad8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8041ada:	429a      	cmp	r2, r3
 8041adc:	d11a      	bne.n	8041b14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8041ade:	68fa      	ldr	r2, [r7, #12]
 8041ae0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8041ae4:	4013      	ands	r3, r2
 8041ae6:	687a      	ldr	r2, [r7, #4]
 8041ae8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8041aea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8041aec:	4293      	cmp	r3, r2
 8041aee:	d111      	bne.n	8041b14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8041af0:	68fb      	ldr	r3, [r7, #12]
 8041af2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8041af6:	687b      	ldr	r3, [r7, #4]
 8041af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8041afa:	085b      	lsrs	r3, r3, #1
 8041afc:	3b01      	subs	r3, #1
 8041afe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8041b00:	429a      	cmp	r2, r3
 8041b02:	d107      	bne.n	8041b14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8041b04:	68fb      	ldr	r3, [r7, #12]
 8041b06:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8041b0a:	687b      	ldr	r3, [r7, #4]
 8041b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8041b0e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8041b10:	429a      	cmp	r2, r3
 8041b12:	d001      	beq.n	8041b18 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8041b14:	2301      	movs	r3, #1
 8041b16:	e000      	b.n	8041b1a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8041b18:	2300      	movs	r3, #0
}
 8041b1a:	4618      	mov	r0, r3
 8041b1c:	3718      	adds	r7, #24
 8041b1e:	46bd      	mov	sp, r7
 8041b20:	bd80      	pop	{r7, pc}
 8041b22:	bf00      	nop
 8041b24:	40023800 	.word	0x40023800

08041b28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8041b28:	b580      	push	{r7, lr}
 8041b2a:	b084      	sub	sp, #16
 8041b2c:	af00      	add	r7, sp, #0
 8041b2e:	6078      	str	r0, [r7, #4]
 8041b30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8041b32:	687b      	ldr	r3, [r7, #4]
 8041b34:	2b00      	cmp	r3, #0
 8041b36:	d101      	bne.n	8041b3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8041b38:	2301      	movs	r3, #1
 8041b3a:	e0cc      	b.n	8041cd6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8041b3c:	4b68      	ldr	r3, [pc, #416]	; (8041ce0 <HAL_RCC_ClockConfig+0x1b8>)
 8041b3e:	681b      	ldr	r3, [r3, #0]
 8041b40:	f003 0307 	and.w	r3, r3, #7
 8041b44:	683a      	ldr	r2, [r7, #0]
 8041b46:	429a      	cmp	r2, r3
 8041b48:	d90c      	bls.n	8041b64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8041b4a:	4b65      	ldr	r3, [pc, #404]	; (8041ce0 <HAL_RCC_ClockConfig+0x1b8>)
 8041b4c:	683a      	ldr	r2, [r7, #0]
 8041b4e:	b2d2      	uxtb	r2, r2
 8041b50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8041b52:	4b63      	ldr	r3, [pc, #396]	; (8041ce0 <HAL_RCC_ClockConfig+0x1b8>)
 8041b54:	681b      	ldr	r3, [r3, #0]
 8041b56:	f003 0307 	and.w	r3, r3, #7
 8041b5a:	683a      	ldr	r2, [r7, #0]
 8041b5c:	429a      	cmp	r2, r3
 8041b5e:	d001      	beq.n	8041b64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8041b60:	2301      	movs	r3, #1
 8041b62:	e0b8      	b.n	8041cd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8041b64:	687b      	ldr	r3, [r7, #4]
 8041b66:	681b      	ldr	r3, [r3, #0]
 8041b68:	f003 0302 	and.w	r3, r3, #2
 8041b6c:	2b00      	cmp	r3, #0
 8041b6e:	d020      	beq.n	8041bb2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8041b70:	687b      	ldr	r3, [r7, #4]
 8041b72:	681b      	ldr	r3, [r3, #0]
 8041b74:	f003 0304 	and.w	r3, r3, #4
 8041b78:	2b00      	cmp	r3, #0
 8041b7a:	d005      	beq.n	8041b88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8041b7c:	4b59      	ldr	r3, [pc, #356]	; (8041ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8041b7e:	689b      	ldr	r3, [r3, #8]
 8041b80:	4a58      	ldr	r2, [pc, #352]	; (8041ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8041b82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8041b86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8041b88:	687b      	ldr	r3, [r7, #4]
 8041b8a:	681b      	ldr	r3, [r3, #0]
 8041b8c:	f003 0308 	and.w	r3, r3, #8
 8041b90:	2b00      	cmp	r3, #0
 8041b92:	d005      	beq.n	8041ba0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8041b94:	4b53      	ldr	r3, [pc, #332]	; (8041ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8041b96:	689b      	ldr	r3, [r3, #8]
 8041b98:	4a52      	ldr	r2, [pc, #328]	; (8041ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8041b9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8041b9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8041ba0:	4b50      	ldr	r3, [pc, #320]	; (8041ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8041ba2:	689b      	ldr	r3, [r3, #8]
 8041ba4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8041ba8:	687b      	ldr	r3, [r7, #4]
 8041baa:	689b      	ldr	r3, [r3, #8]
 8041bac:	494d      	ldr	r1, [pc, #308]	; (8041ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8041bae:	4313      	orrs	r3, r2
 8041bb0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8041bb2:	687b      	ldr	r3, [r7, #4]
 8041bb4:	681b      	ldr	r3, [r3, #0]
 8041bb6:	f003 0301 	and.w	r3, r3, #1
 8041bba:	2b00      	cmp	r3, #0
 8041bbc:	d044      	beq.n	8041c48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8041bbe:	687b      	ldr	r3, [r7, #4]
 8041bc0:	685b      	ldr	r3, [r3, #4]
 8041bc2:	2b01      	cmp	r3, #1
 8041bc4:	d107      	bne.n	8041bd6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8041bc6:	4b47      	ldr	r3, [pc, #284]	; (8041ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8041bc8:	681b      	ldr	r3, [r3, #0]
 8041bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8041bce:	2b00      	cmp	r3, #0
 8041bd0:	d119      	bne.n	8041c06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8041bd2:	2301      	movs	r3, #1
 8041bd4:	e07f      	b.n	8041cd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8041bd6:	687b      	ldr	r3, [r7, #4]
 8041bd8:	685b      	ldr	r3, [r3, #4]
 8041bda:	2b02      	cmp	r3, #2
 8041bdc:	d003      	beq.n	8041be6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8041bde:	687b      	ldr	r3, [r7, #4]
 8041be0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8041be2:	2b03      	cmp	r3, #3
 8041be4:	d107      	bne.n	8041bf6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8041be6:	4b3f      	ldr	r3, [pc, #252]	; (8041ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8041be8:	681b      	ldr	r3, [r3, #0]
 8041bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8041bee:	2b00      	cmp	r3, #0
 8041bf0:	d109      	bne.n	8041c06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8041bf2:	2301      	movs	r3, #1
 8041bf4:	e06f      	b.n	8041cd6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8041bf6:	4b3b      	ldr	r3, [pc, #236]	; (8041ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8041bf8:	681b      	ldr	r3, [r3, #0]
 8041bfa:	f003 0302 	and.w	r3, r3, #2
 8041bfe:	2b00      	cmp	r3, #0
 8041c00:	d101      	bne.n	8041c06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8041c02:	2301      	movs	r3, #1
 8041c04:	e067      	b.n	8041cd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8041c06:	4b37      	ldr	r3, [pc, #220]	; (8041ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8041c08:	689b      	ldr	r3, [r3, #8]
 8041c0a:	f023 0203 	bic.w	r2, r3, #3
 8041c0e:	687b      	ldr	r3, [r7, #4]
 8041c10:	685b      	ldr	r3, [r3, #4]
 8041c12:	4934      	ldr	r1, [pc, #208]	; (8041ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8041c14:	4313      	orrs	r3, r2
 8041c16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8041c18:	f7fe ff74 	bl	8040b04 <HAL_GetTick>
 8041c1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8041c1e:	e00a      	b.n	8041c36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8041c20:	f7fe ff70 	bl	8040b04 <HAL_GetTick>
 8041c24:	4602      	mov	r2, r0
 8041c26:	68fb      	ldr	r3, [r7, #12]
 8041c28:	1ad3      	subs	r3, r2, r3
 8041c2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8041c2e:	4293      	cmp	r3, r2
 8041c30:	d901      	bls.n	8041c36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8041c32:	2303      	movs	r3, #3
 8041c34:	e04f      	b.n	8041cd6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8041c36:	4b2b      	ldr	r3, [pc, #172]	; (8041ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8041c38:	689b      	ldr	r3, [r3, #8]
 8041c3a:	f003 020c 	and.w	r2, r3, #12
 8041c3e:	687b      	ldr	r3, [r7, #4]
 8041c40:	685b      	ldr	r3, [r3, #4]
 8041c42:	009b      	lsls	r3, r3, #2
 8041c44:	429a      	cmp	r2, r3
 8041c46:	d1eb      	bne.n	8041c20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8041c48:	4b25      	ldr	r3, [pc, #148]	; (8041ce0 <HAL_RCC_ClockConfig+0x1b8>)
 8041c4a:	681b      	ldr	r3, [r3, #0]
 8041c4c:	f003 0307 	and.w	r3, r3, #7
 8041c50:	683a      	ldr	r2, [r7, #0]
 8041c52:	429a      	cmp	r2, r3
 8041c54:	d20c      	bcs.n	8041c70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8041c56:	4b22      	ldr	r3, [pc, #136]	; (8041ce0 <HAL_RCC_ClockConfig+0x1b8>)
 8041c58:	683a      	ldr	r2, [r7, #0]
 8041c5a:	b2d2      	uxtb	r2, r2
 8041c5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8041c5e:	4b20      	ldr	r3, [pc, #128]	; (8041ce0 <HAL_RCC_ClockConfig+0x1b8>)
 8041c60:	681b      	ldr	r3, [r3, #0]
 8041c62:	f003 0307 	and.w	r3, r3, #7
 8041c66:	683a      	ldr	r2, [r7, #0]
 8041c68:	429a      	cmp	r2, r3
 8041c6a:	d001      	beq.n	8041c70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8041c6c:	2301      	movs	r3, #1
 8041c6e:	e032      	b.n	8041cd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8041c70:	687b      	ldr	r3, [r7, #4]
 8041c72:	681b      	ldr	r3, [r3, #0]
 8041c74:	f003 0304 	and.w	r3, r3, #4
 8041c78:	2b00      	cmp	r3, #0
 8041c7a:	d008      	beq.n	8041c8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8041c7c:	4b19      	ldr	r3, [pc, #100]	; (8041ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8041c7e:	689b      	ldr	r3, [r3, #8]
 8041c80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8041c84:	687b      	ldr	r3, [r7, #4]
 8041c86:	68db      	ldr	r3, [r3, #12]
 8041c88:	4916      	ldr	r1, [pc, #88]	; (8041ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8041c8a:	4313      	orrs	r3, r2
 8041c8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8041c8e:	687b      	ldr	r3, [r7, #4]
 8041c90:	681b      	ldr	r3, [r3, #0]
 8041c92:	f003 0308 	and.w	r3, r3, #8
 8041c96:	2b00      	cmp	r3, #0
 8041c98:	d009      	beq.n	8041cae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8041c9a:	4b12      	ldr	r3, [pc, #72]	; (8041ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8041c9c:	689b      	ldr	r3, [r3, #8]
 8041c9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8041ca2:	687b      	ldr	r3, [r7, #4]
 8041ca4:	691b      	ldr	r3, [r3, #16]
 8041ca6:	00db      	lsls	r3, r3, #3
 8041ca8:	490e      	ldr	r1, [pc, #56]	; (8041ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8041caa:	4313      	orrs	r3, r2
 8041cac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8041cae:	f000 f821 	bl	8041cf4 <HAL_RCC_GetSysClockFreq>
 8041cb2:	4602      	mov	r2, r0
 8041cb4:	4b0b      	ldr	r3, [pc, #44]	; (8041ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8041cb6:	689b      	ldr	r3, [r3, #8]
 8041cb8:	091b      	lsrs	r3, r3, #4
 8041cba:	f003 030f 	and.w	r3, r3, #15
 8041cbe:	490a      	ldr	r1, [pc, #40]	; (8041ce8 <HAL_RCC_ClockConfig+0x1c0>)
 8041cc0:	5ccb      	ldrb	r3, [r1, r3]
 8041cc2:	fa22 f303 	lsr.w	r3, r2, r3
 8041cc6:	4a09      	ldr	r2, [pc, #36]	; (8041cec <HAL_RCC_ClockConfig+0x1c4>)
 8041cc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8041cca:	4b09      	ldr	r3, [pc, #36]	; (8041cf0 <HAL_RCC_ClockConfig+0x1c8>)
 8041ccc:	681b      	ldr	r3, [r3, #0]
 8041cce:	4618      	mov	r0, r3
 8041cd0:	f7fe fed4 	bl	8040a7c <HAL_InitTick>

  return HAL_OK;
 8041cd4:	2300      	movs	r3, #0
}
 8041cd6:	4618      	mov	r0, r3
 8041cd8:	3710      	adds	r7, #16
 8041cda:	46bd      	mov	sp, r7
 8041cdc:	bd80      	pop	{r7, pc}
 8041cde:	bf00      	nop
 8041ce0:	40023c00 	.word	0x40023c00
 8041ce4:	40023800 	.word	0x40023800
 8041ce8:	08042a3c 	.word	0x08042a3c
 8041cec:	2000005c 	.word	0x2000005c
 8041cf0:	20000060 	.word	0x20000060

08041cf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8041cf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8041cf8:	b094      	sub	sp, #80	; 0x50
 8041cfa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8041cfc:	2300      	movs	r3, #0
 8041cfe:	647b      	str	r3, [r7, #68]	; 0x44
 8041d00:	2300      	movs	r3, #0
 8041d02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8041d04:	2300      	movs	r3, #0
 8041d06:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8041d08:	2300      	movs	r3, #0
 8041d0a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8041d0c:	4b79      	ldr	r3, [pc, #484]	; (8041ef4 <HAL_RCC_GetSysClockFreq+0x200>)
 8041d0e:	689b      	ldr	r3, [r3, #8]
 8041d10:	f003 030c 	and.w	r3, r3, #12
 8041d14:	2b08      	cmp	r3, #8
 8041d16:	d00d      	beq.n	8041d34 <HAL_RCC_GetSysClockFreq+0x40>
 8041d18:	2b08      	cmp	r3, #8
 8041d1a:	f200 80e1 	bhi.w	8041ee0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8041d1e:	2b00      	cmp	r3, #0
 8041d20:	d002      	beq.n	8041d28 <HAL_RCC_GetSysClockFreq+0x34>
 8041d22:	2b04      	cmp	r3, #4
 8041d24:	d003      	beq.n	8041d2e <HAL_RCC_GetSysClockFreq+0x3a>
 8041d26:	e0db      	b.n	8041ee0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8041d28:	4b73      	ldr	r3, [pc, #460]	; (8041ef8 <HAL_RCC_GetSysClockFreq+0x204>)
 8041d2a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8041d2c:	e0db      	b.n	8041ee6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8041d2e:	4b73      	ldr	r3, [pc, #460]	; (8041efc <HAL_RCC_GetSysClockFreq+0x208>)
 8041d30:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8041d32:	e0d8      	b.n	8041ee6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8041d34:	4b6f      	ldr	r3, [pc, #444]	; (8041ef4 <HAL_RCC_GetSysClockFreq+0x200>)
 8041d36:	685b      	ldr	r3, [r3, #4]
 8041d38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8041d3c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8041d3e:	4b6d      	ldr	r3, [pc, #436]	; (8041ef4 <HAL_RCC_GetSysClockFreq+0x200>)
 8041d40:	685b      	ldr	r3, [r3, #4]
 8041d42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8041d46:	2b00      	cmp	r3, #0
 8041d48:	d063      	beq.n	8041e12 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8041d4a:	4b6a      	ldr	r3, [pc, #424]	; (8041ef4 <HAL_RCC_GetSysClockFreq+0x200>)
 8041d4c:	685b      	ldr	r3, [r3, #4]
 8041d4e:	099b      	lsrs	r3, r3, #6
 8041d50:	2200      	movs	r2, #0
 8041d52:	63bb      	str	r3, [r7, #56]	; 0x38
 8041d54:	63fa      	str	r2, [r7, #60]	; 0x3c
 8041d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8041d58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8041d5c:	633b      	str	r3, [r7, #48]	; 0x30
 8041d5e:	2300      	movs	r3, #0
 8041d60:	637b      	str	r3, [r7, #52]	; 0x34
 8041d62:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8041d66:	4622      	mov	r2, r4
 8041d68:	462b      	mov	r3, r5
 8041d6a:	f04f 0000 	mov.w	r0, #0
 8041d6e:	f04f 0100 	mov.w	r1, #0
 8041d72:	0159      	lsls	r1, r3, #5
 8041d74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8041d78:	0150      	lsls	r0, r2, #5
 8041d7a:	4602      	mov	r2, r0
 8041d7c:	460b      	mov	r3, r1
 8041d7e:	4621      	mov	r1, r4
 8041d80:	1a51      	subs	r1, r2, r1
 8041d82:	6139      	str	r1, [r7, #16]
 8041d84:	4629      	mov	r1, r5
 8041d86:	eb63 0301 	sbc.w	r3, r3, r1
 8041d8a:	617b      	str	r3, [r7, #20]
 8041d8c:	f04f 0200 	mov.w	r2, #0
 8041d90:	f04f 0300 	mov.w	r3, #0
 8041d94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8041d98:	4659      	mov	r1, fp
 8041d9a:	018b      	lsls	r3, r1, #6
 8041d9c:	4651      	mov	r1, sl
 8041d9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8041da2:	4651      	mov	r1, sl
 8041da4:	018a      	lsls	r2, r1, #6
 8041da6:	4651      	mov	r1, sl
 8041da8:	ebb2 0801 	subs.w	r8, r2, r1
 8041dac:	4659      	mov	r1, fp
 8041dae:	eb63 0901 	sbc.w	r9, r3, r1
 8041db2:	f04f 0200 	mov.w	r2, #0
 8041db6:	f04f 0300 	mov.w	r3, #0
 8041dba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8041dbe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8041dc2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8041dc6:	4690      	mov	r8, r2
 8041dc8:	4699      	mov	r9, r3
 8041dca:	4623      	mov	r3, r4
 8041dcc:	eb18 0303 	adds.w	r3, r8, r3
 8041dd0:	60bb      	str	r3, [r7, #8]
 8041dd2:	462b      	mov	r3, r5
 8041dd4:	eb49 0303 	adc.w	r3, r9, r3
 8041dd8:	60fb      	str	r3, [r7, #12]
 8041dda:	f04f 0200 	mov.w	r2, #0
 8041dde:	f04f 0300 	mov.w	r3, #0
 8041de2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8041de6:	4629      	mov	r1, r5
 8041de8:	024b      	lsls	r3, r1, #9
 8041dea:	4621      	mov	r1, r4
 8041dec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8041df0:	4621      	mov	r1, r4
 8041df2:	024a      	lsls	r2, r1, #9
 8041df4:	4610      	mov	r0, r2
 8041df6:	4619      	mov	r1, r3
 8041df8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8041dfa:	2200      	movs	r2, #0
 8041dfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8041dfe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8041e00:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8041e04:	f7fe f9e8 	bl	80401d8 <__aeabi_uldivmod>
 8041e08:	4602      	mov	r2, r0
 8041e0a:	460b      	mov	r3, r1
 8041e0c:	4613      	mov	r3, r2
 8041e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8041e10:	e058      	b.n	8041ec4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8041e12:	4b38      	ldr	r3, [pc, #224]	; (8041ef4 <HAL_RCC_GetSysClockFreq+0x200>)
 8041e14:	685b      	ldr	r3, [r3, #4]
 8041e16:	099b      	lsrs	r3, r3, #6
 8041e18:	2200      	movs	r2, #0
 8041e1a:	4618      	mov	r0, r3
 8041e1c:	4611      	mov	r1, r2
 8041e1e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8041e22:	623b      	str	r3, [r7, #32]
 8041e24:	2300      	movs	r3, #0
 8041e26:	627b      	str	r3, [r7, #36]	; 0x24
 8041e28:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8041e2c:	4642      	mov	r2, r8
 8041e2e:	464b      	mov	r3, r9
 8041e30:	f04f 0000 	mov.w	r0, #0
 8041e34:	f04f 0100 	mov.w	r1, #0
 8041e38:	0159      	lsls	r1, r3, #5
 8041e3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8041e3e:	0150      	lsls	r0, r2, #5
 8041e40:	4602      	mov	r2, r0
 8041e42:	460b      	mov	r3, r1
 8041e44:	4641      	mov	r1, r8
 8041e46:	ebb2 0a01 	subs.w	sl, r2, r1
 8041e4a:	4649      	mov	r1, r9
 8041e4c:	eb63 0b01 	sbc.w	fp, r3, r1
 8041e50:	f04f 0200 	mov.w	r2, #0
 8041e54:	f04f 0300 	mov.w	r3, #0
 8041e58:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8041e5c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8041e60:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8041e64:	ebb2 040a 	subs.w	r4, r2, sl
 8041e68:	eb63 050b 	sbc.w	r5, r3, fp
 8041e6c:	f04f 0200 	mov.w	r2, #0
 8041e70:	f04f 0300 	mov.w	r3, #0
 8041e74:	00eb      	lsls	r3, r5, #3
 8041e76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8041e7a:	00e2      	lsls	r2, r4, #3
 8041e7c:	4614      	mov	r4, r2
 8041e7e:	461d      	mov	r5, r3
 8041e80:	4643      	mov	r3, r8
 8041e82:	18e3      	adds	r3, r4, r3
 8041e84:	603b      	str	r3, [r7, #0]
 8041e86:	464b      	mov	r3, r9
 8041e88:	eb45 0303 	adc.w	r3, r5, r3
 8041e8c:	607b      	str	r3, [r7, #4]
 8041e8e:	f04f 0200 	mov.w	r2, #0
 8041e92:	f04f 0300 	mov.w	r3, #0
 8041e96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8041e9a:	4629      	mov	r1, r5
 8041e9c:	028b      	lsls	r3, r1, #10
 8041e9e:	4621      	mov	r1, r4
 8041ea0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8041ea4:	4621      	mov	r1, r4
 8041ea6:	028a      	lsls	r2, r1, #10
 8041ea8:	4610      	mov	r0, r2
 8041eaa:	4619      	mov	r1, r3
 8041eac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8041eae:	2200      	movs	r2, #0
 8041eb0:	61bb      	str	r3, [r7, #24]
 8041eb2:	61fa      	str	r2, [r7, #28]
 8041eb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8041eb8:	f7fe f98e 	bl	80401d8 <__aeabi_uldivmod>
 8041ebc:	4602      	mov	r2, r0
 8041ebe:	460b      	mov	r3, r1
 8041ec0:	4613      	mov	r3, r2
 8041ec2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8041ec4:	4b0b      	ldr	r3, [pc, #44]	; (8041ef4 <HAL_RCC_GetSysClockFreq+0x200>)
 8041ec6:	685b      	ldr	r3, [r3, #4]
 8041ec8:	0c1b      	lsrs	r3, r3, #16
 8041eca:	f003 0303 	and.w	r3, r3, #3
 8041ece:	3301      	adds	r3, #1
 8041ed0:	005b      	lsls	r3, r3, #1
 8041ed2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8041ed4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8041ed6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8041ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8041edc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8041ede:	e002      	b.n	8041ee6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8041ee0:	4b05      	ldr	r3, [pc, #20]	; (8041ef8 <HAL_RCC_GetSysClockFreq+0x204>)
 8041ee2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8041ee4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8041ee6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8041ee8:	4618      	mov	r0, r3
 8041eea:	3750      	adds	r7, #80	; 0x50
 8041eec:	46bd      	mov	sp, r7
 8041eee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8041ef2:	bf00      	nop
 8041ef4:	40023800 	.word	0x40023800
 8041ef8:	00f42400 	.word	0x00f42400
 8041efc:	007a1200 	.word	0x007a1200

08041f00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8041f00:	b480      	push	{r7}
 8041f02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8041f04:	4b03      	ldr	r3, [pc, #12]	; (8041f14 <HAL_RCC_GetHCLKFreq+0x14>)
 8041f06:	681b      	ldr	r3, [r3, #0]
}
 8041f08:	4618      	mov	r0, r3
 8041f0a:	46bd      	mov	sp, r7
 8041f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041f10:	4770      	bx	lr
 8041f12:	bf00      	nop
 8041f14:	2000005c 	.word	0x2000005c

08041f18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8041f18:	b580      	push	{r7, lr}
 8041f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8041f1c:	f7ff fff0 	bl	8041f00 <HAL_RCC_GetHCLKFreq>
 8041f20:	4602      	mov	r2, r0
 8041f22:	4b05      	ldr	r3, [pc, #20]	; (8041f38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8041f24:	689b      	ldr	r3, [r3, #8]
 8041f26:	0a9b      	lsrs	r3, r3, #10
 8041f28:	f003 0307 	and.w	r3, r3, #7
 8041f2c:	4903      	ldr	r1, [pc, #12]	; (8041f3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8041f2e:	5ccb      	ldrb	r3, [r1, r3]
 8041f30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8041f34:	4618      	mov	r0, r3
 8041f36:	bd80      	pop	{r7, pc}
 8041f38:	40023800 	.word	0x40023800
 8041f3c:	08042a4c 	.word	0x08042a4c

08041f40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8041f40:	b580      	push	{r7, lr}
 8041f42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8041f44:	f7ff ffdc 	bl	8041f00 <HAL_RCC_GetHCLKFreq>
 8041f48:	4602      	mov	r2, r0
 8041f4a:	4b05      	ldr	r3, [pc, #20]	; (8041f60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8041f4c:	689b      	ldr	r3, [r3, #8]
 8041f4e:	0b5b      	lsrs	r3, r3, #13
 8041f50:	f003 0307 	and.w	r3, r3, #7
 8041f54:	4903      	ldr	r1, [pc, #12]	; (8041f64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8041f56:	5ccb      	ldrb	r3, [r1, r3]
 8041f58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8041f5c:	4618      	mov	r0, r3
 8041f5e:	bd80      	pop	{r7, pc}
 8041f60:	40023800 	.word	0x40023800
 8041f64:	08042a4c 	.word	0x08042a4c

08041f68 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8041f68:	b580      	push	{r7, lr}
 8041f6a:	b082      	sub	sp, #8
 8041f6c:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8041f6e:	f7fe fdc9 	bl	8040b04 <HAL_GetTick>
 8041f72:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8041f74:	4b5d      	ldr	r3, [pc, #372]	; (80420ec <HAL_RCC_DeInit+0x184>)
 8041f76:	681b      	ldr	r3, [r3, #0]
 8041f78:	4a5c      	ldr	r2, [pc, #368]	; (80420ec <HAL_RCC_DeInit+0x184>)
 8041f7a:	f043 0301 	orr.w	r3, r3, #1
 8041f7e:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8041f80:	e008      	b.n	8041f94 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8041f82:	f7fe fdbf 	bl	8040b04 <HAL_GetTick>
 8041f86:	4602      	mov	r2, r0
 8041f88:	687b      	ldr	r3, [r7, #4]
 8041f8a:	1ad3      	subs	r3, r2, r3
 8041f8c:	2b02      	cmp	r3, #2
 8041f8e:	d901      	bls.n	8041f94 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8041f90:	2303      	movs	r3, #3
 8041f92:	e0a7      	b.n	80420e4 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8041f94:	4b55      	ldr	r3, [pc, #340]	; (80420ec <HAL_RCC_DeInit+0x184>)
 8041f96:	681b      	ldr	r3, [r3, #0]
 8041f98:	f003 0302 	and.w	r3, r3, #2
 8041f9c:	2b00      	cmp	r3, #0
 8041f9e:	d0f0      	beq.n	8041f82 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8041fa0:	4b52      	ldr	r3, [pc, #328]	; (80420ec <HAL_RCC_DeInit+0x184>)
 8041fa2:	681b      	ldr	r3, [r3, #0]
 8041fa4:	4a51      	ldr	r2, [pc, #324]	; (80420ec <HAL_RCC_DeInit+0x184>)
 8041fa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8041faa:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8041fac:	f7fe fdaa 	bl	8040b04 <HAL_GetTick>
 8041fb0:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8041fb2:	4b4e      	ldr	r3, [pc, #312]	; (80420ec <HAL_RCC_DeInit+0x184>)
 8041fb4:	2200      	movs	r2, #0
 8041fb6:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8041fb8:	e00a      	b.n	8041fd0 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8041fba:	f7fe fda3 	bl	8040b04 <HAL_GetTick>
 8041fbe:	4602      	mov	r2, r0
 8041fc0:	687b      	ldr	r3, [r7, #4]
 8041fc2:	1ad3      	subs	r3, r2, r3
 8041fc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8041fc8:	4293      	cmp	r3, r2
 8041fca:	d901      	bls.n	8041fd0 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8041fcc:	2303      	movs	r3, #3
 8041fce:	e089      	b.n	80420e4 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8041fd0:	4b46      	ldr	r3, [pc, #280]	; (80420ec <HAL_RCC_DeInit+0x184>)
 8041fd2:	689b      	ldr	r3, [r3, #8]
 8041fd4:	f003 030c 	and.w	r3, r3, #12
 8041fd8:	2b00      	cmp	r3, #0
 8041fda:	d1ee      	bne.n	8041fba <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8041fdc:	f7fe fd92 	bl	8040b04 <HAL_GetTick>
 8041fe0:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8041fe2:	4b42      	ldr	r3, [pc, #264]	; (80420ec <HAL_RCC_DeInit+0x184>)
 8041fe4:	681b      	ldr	r3, [r3, #0]
 8041fe6:	4a41      	ldr	r2, [pc, #260]	; (80420ec <HAL_RCC_DeInit+0x184>)
 8041fe8:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 8041fec:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8041fee:	e008      	b.n	8042002 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8041ff0:	f7fe fd88 	bl	8040b04 <HAL_GetTick>
 8041ff4:	4602      	mov	r2, r0
 8041ff6:	687b      	ldr	r3, [r7, #4]
 8041ff8:	1ad3      	subs	r3, r2, r3
 8041ffa:	2b64      	cmp	r3, #100	; 0x64
 8041ffc:	d901      	bls.n	8042002 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8041ffe:	2303      	movs	r3, #3
 8042000:	e070      	b.n	80420e4 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8042002:	4b3a      	ldr	r3, [pc, #232]	; (80420ec <HAL_RCC_DeInit+0x184>)
 8042004:	681b      	ldr	r3, [r3, #0]
 8042006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 804200a:	2b00      	cmp	r3, #0
 804200c:	d1f0      	bne.n	8041ff0 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 804200e:	f7fe fd79 	bl	8040b04 <HAL_GetTick>
 8042012:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8042014:	4b35      	ldr	r3, [pc, #212]	; (80420ec <HAL_RCC_DeInit+0x184>)
 8042016:	681b      	ldr	r3, [r3, #0]
 8042018:	4a34      	ldr	r2, [pc, #208]	; (80420ec <HAL_RCC_DeInit+0x184>)
 804201a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 804201e:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8042020:	e008      	b.n	8042034 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8042022:	f7fe fd6f 	bl	8040b04 <HAL_GetTick>
 8042026:	4602      	mov	r2, r0
 8042028:	687b      	ldr	r3, [r7, #4]
 804202a:	1ad3      	subs	r3, r2, r3
 804202c:	2b02      	cmp	r3, #2
 804202e:	d901      	bls.n	8042034 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8042030:	2303      	movs	r3, #3
 8042032:	e057      	b.n	80420e4 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8042034:	4b2d      	ldr	r3, [pc, #180]	; (80420ec <HAL_RCC_DeInit+0x184>)
 8042036:	681b      	ldr	r3, [r3, #0]
 8042038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 804203c:	2b00      	cmp	r3, #0
 804203e:	d1f0      	bne.n	8042022 <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8042040:	f7fe fd60 	bl	8040b04 <HAL_GetTick>
 8042044:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8042046:	4b29      	ldr	r3, [pc, #164]	; (80420ec <HAL_RCC_DeInit+0x184>)
 8042048:	681b      	ldr	r3, [r3, #0]
 804204a:	4a28      	ldr	r2, [pc, #160]	; (80420ec <HAL_RCC_DeInit+0x184>)
 804204c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8042050:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8042052:	e008      	b.n	8042066 <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8042054:	f7fe fd56 	bl	8040b04 <HAL_GetTick>
 8042058:	4602      	mov	r2, r0
 804205a:	687b      	ldr	r3, [r7, #4]
 804205c:	1ad3      	subs	r3, r2, r3
 804205e:	2b02      	cmp	r3, #2
 8042060:	d901      	bls.n	8042066 <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8042062:	2303      	movs	r3, #3
 8042064:	e03e      	b.n	80420e4 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8042066:	4b21      	ldr	r3, [pc, #132]	; (80420ec <HAL_RCC_DeInit+0x184>)
 8042068:	681b      	ldr	r3, [r3, #0]
 804206a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 804206e:	2b00      	cmp	r3, #0
 8042070:	d1f0      	bne.n	8042054 <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 8042072:	4b1e      	ldr	r3, [pc, #120]	; (80420ec <HAL_RCC_DeInit+0x184>)
 8042074:	4a1e      	ldr	r2, [pc, #120]	; (80420f0 <HAL_RCC_DeInit+0x188>)
 8042076:	605a      	str	r2, [r3, #4]
  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8042078:	4b1c      	ldr	r3, [pc, #112]	; (80420ec <HAL_RCC_DeInit+0x184>)
 804207a:	4a1e      	ldr	r2, [pc, #120]	; (80420f4 <HAL_RCC_DeInit+0x18c>)
 804207c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8042080:	4b1a      	ldr	r3, [pc, #104]	; (80420ec <HAL_RCC_DeInit+0x184>)
 8042082:	68db      	ldr	r3, [r3, #12]
 8042084:	4a19      	ldr	r2, [pc, #100]	; (80420ec <HAL_RCC_DeInit+0x184>)
 8042086:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 804208a:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 804208c:	4b17      	ldr	r3, [pc, #92]	; (80420ec <HAL_RCC_DeInit+0x184>)
 804208e:	68db      	ldr	r3, [r3, #12]
 8042090:	4a16      	ldr	r2, [pc, #88]	; (80420ec <HAL_RCC_DeInit+0x184>)
 8042092:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8042096:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8042098:	4b14      	ldr	r3, [pc, #80]	; (80420ec <HAL_RCC_DeInit+0x184>)
 804209a:	68db      	ldr	r3, [r3, #12]
 804209c:	4a13      	ldr	r2, [pc, #76]	; (80420ec <HAL_RCC_DeInit+0x184>)
 804209e:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 80420a2:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 80420a4:	4b11      	ldr	r3, [pc, #68]	; (80420ec <HAL_RCC_DeInit+0x184>)
 80420a6:	68db      	ldr	r3, [r3, #12]
 80420a8:	4a10      	ldr	r2, [pc, #64]	; (80420ec <HAL_RCC_DeInit+0x184>)
 80420aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80420ae:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80420b0:	4b0e      	ldr	r3, [pc, #56]	; (80420ec <HAL_RCC_DeInit+0x184>)
 80420b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80420b4:	4a0d      	ldr	r2, [pc, #52]	; (80420ec <HAL_RCC_DeInit+0x184>)
 80420b6:	f023 0301 	bic.w	r3, r3, #1
 80420ba:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80420bc:	4b0b      	ldr	r3, [pc, #44]	; (80420ec <HAL_RCC_DeInit+0x184>)
 80420be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80420c0:	4a0a      	ldr	r2, [pc, #40]	; (80420ec <HAL_RCC_DeInit+0x184>)
 80420c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80420c6:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 80420c8:	4b0b      	ldr	r3, [pc, #44]	; (80420f8 <HAL_RCC_DeInit+0x190>)
 80420ca:	4a0c      	ldr	r2, [pc, #48]	; (80420fc <HAL_RCC_DeInit+0x194>)
 80420cc:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 80420ce:	4b0c      	ldr	r3, [pc, #48]	; (8042100 <HAL_RCC_DeInit+0x198>)
 80420d0:	681b      	ldr	r3, [r3, #0]
 80420d2:	4618      	mov	r0, r3
 80420d4:	f7fe fcd2 	bl	8040a7c <HAL_InitTick>
 80420d8:	4603      	mov	r3, r0
 80420da:	2b00      	cmp	r3, #0
 80420dc:	d001      	beq.n	80420e2 <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 80420de:	2301      	movs	r3, #1
 80420e0:	e000      	b.n	80420e4 <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 80420e2:	2300      	movs	r3, #0
  }
}
 80420e4:	4618      	mov	r0, r3
 80420e6:	3708      	adds	r7, #8
 80420e8:	46bd      	mov	sp, r7
 80420ea:	bd80      	pop	{r7, pc}
 80420ec:	40023800 	.word	0x40023800
 80420f0:	04003010 	.word	0x04003010
 80420f4:	20003000 	.word	0x20003000
 80420f8:	2000005c 	.word	0x2000005c
 80420fc:	00f42400 	.word	0x00f42400
 8042100:	20000060 	.word	0x20000060

08042104 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8042104:	b580      	push	{r7, lr}
 8042106:	b082      	sub	sp, #8
 8042108:	af00      	add	r7, sp, #0
 804210a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 804210c:	687b      	ldr	r3, [r7, #4]
 804210e:	2b00      	cmp	r3, #0
 8042110:	d101      	bne.n	8042116 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8042112:	2301      	movs	r3, #1
 8042114:	e03f      	b.n	8042196 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8042116:	687b      	ldr	r3, [r7, #4]
 8042118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 804211c:	b2db      	uxtb	r3, r3
 804211e:	2b00      	cmp	r3, #0
 8042120:	d106      	bne.n	8042130 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8042122:	687b      	ldr	r3, [r7, #4]
 8042124:	2200      	movs	r2, #0
 8042126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 804212a:	6878      	ldr	r0, [r7, #4]
 804212c:	f7fe fba2 	bl	8040874 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8042130:	687b      	ldr	r3, [r7, #4]
 8042132:	2224      	movs	r2, #36	; 0x24
 8042134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8042138:	687b      	ldr	r3, [r7, #4]
 804213a:	681b      	ldr	r3, [r3, #0]
 804213c:	68da      	ldr	r2, [r3, #12]
 804213e:	687b      	ldr	r3, [r7, #4]
 8042140:	681b      	ldr	r3, [r3, #0]
 8042142:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8042146:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8042148:	6878      	ldr	r0, [r7, #4]
 804214a:	f000 f9cb 	bl	80424e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 804214e:	687b      	ldr	r3, [r7, #4]
 8042150:	681b      	ldr	r3, [r3, #0]
 8042152:	691a      	ldr	r2, [r3, #16]
 8042154:	687b      	ldr	r3, [r7, #4]
 8042156:	681b      	ldr	r3, [r3, #0]
 8042158:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 804215c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 804215e:	687b      	ldr	r3, [r7, #4]
 8042160:	681b      	ldr	r3, [r3, #0]
 8042162:	695a      	ldr	r2, [r3, #20]
 8042164:	687b      	ldr	r3, [r7, #4]
 8042166:	681b      	ldr	r3, [r3, #0]
 8042168:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 804216c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 804216e:	687b      	ldr	r3, [r7, #4]
 8042170:	681b      	ldr	r3, [r3, #0]
 8042172:	68da      	ldr	r2, [r3, #12]
 8042174:	687b      	ldr	r3, [r7, #4]
 8042176:	681b      	ldr	r3, [r3, #0]
 8042178:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 804217c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 804217e:	687b      	ldr	r3, [r7, #4]
 8042180:	2200      	movs	r2, #0
 8042182:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8042184:	687b      	ldr	r3, [r7, #4]
 8042186:	2220      	movs	r2, #32
 8042188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 804218c:	687b      	ldr	r3, [r7, #4]
 804218e:	2220      	movs	r2, #32
 8042190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8042194:	2300      	movs	r3, #0
}
 8042196:	4618      	mov	r0, r3
 8042198:	3708      	adds	r7, #8
 804219a:	46bd      	mov	sp, r7
 804219c:	bd80      	pop	{r7, pc}

0804219e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 804219e:	b580      	push	{r7, lr}
 80421a0:	b08a      	sub	sp, #40	; 0x28
 80421a2:	af02      	add	r7, sp, #8
 80421a4:	60f8      	str	r0, [r7, #12]
 80421a6:	60b9      	str	r1, [r7, #8]
 80421a8:	603b      	str	r3, [r7, #0]
 80421aa:	4613      	mov	r3, r2
 80421ac:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80421ae:	2300      	movs	r3, #0
 80421b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80421b2:	68fb      	ldr	r3, [r7, #12]
 80421b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80421b8:	b2db      	uxtb	r3, r3
 80421ba:	2b20      	cmp	r3, #32
 80421bc:	d17c      	bne.n	80422b8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80421be:	68bb      	ldr	r3, [r7, #8]
 80421c0:	2b00      	cmp	r3, #0
 80421c2:	d002      	beq.n	80421ca <HAL_UART_Transmit+0x2c>
 80421c4:	88fb      	ldrh	r3, [r7, #6]
 80421c6:	2b00      	cmp	r3, #0
 80421c8:	d101      	bne.n	80421ce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80421ca:	2301      	movs	r3, #1
 80421cc:	e075      	b.n	80422ba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80421ce:	68fb      	ldr	r3, [r7, #12]
 80421d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80421d4:	2b01      	cmp	r3, #1
 80421d6:	d101      	bne.n	80421dc <HAL_UART_Transmit+0x3e>
 80421d8:	2302      	movs	r3, #2
 80421da:	e06e      	b.n	80422ba <HAL_UART_Transmit+0x11c>
 80421dc:	68fb      	ldr	r3, [r7, #12]
 80421de:	2201      	movs	r2, #1
 80421e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80421e4:	68fb      	ldr	r3, [r7, #12]
 80421e6:	2200      	movs	r2, #0
 80421e8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80421ea:	68fb      	ldr	r3, [r7, #12]
 80421ec:	2221      	movs	r2, #33	; 0x21
 80421ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80421f2:	f7fe fc87 	bl	8040b04 <HAL_GetTick>
 80421f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80421f8:	68fb      	ldr	r3, [r7, #12]
 80421fa:	88fa      	ldrh	r2, [r7, #6]
 80421fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80421fe:	68fb      	ldr	r3, [r7, #12]
 8042200:	88fa      	ldrh	r2, [r7, #6]
 8042202:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8042204:	68fb      	ldr	r3, [r7, #12]
 8042206:	689b      	ldr	r3, [r3, #8]
 8042208:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 804220c:	d108      	bne.n	8042220 <HAL_UART_Transmit+0x82>
 804220e:	68fb      	ldr	r3, [r7, #12]
 8042210:	691b      	ldr	r3, [r3, #16]
 8042212:	2b00      	cmp	r3, #0
 8042214:	d104      	bne.n	8042220 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8042216:	2300      	movs	r3, #0
 8042218:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 804221a:	68bb      	ldr	r3, [r7, #8]
 804221c:	61bb      	str	r3, [r7, #24]
 804221e:	e003      	b.n	8042228 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8042220:	68bb      	ldr	r3, [r7, #8]
 8042222:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8042224:	2300      	movs	r3, #0
 8042226:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8042228:	68fb      	ldr	r3, [r7, #12]
 804222a:	2200      	movs	r2, #0
 804222c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8042230:	e02a      	b.n	8042288 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8042232:	683b      	ldr	r3, [r7, #0]
 8042234:	9300      	str	r3, [sp, #0]
 8042236:	697b      	ldr	r3, [r7, #20]
 8042238:	2200      	movs	r2, #0
 804223a:	2180      	movs	r1, #128	; 0x80
 804223c:	68f8      	ldr	r0, [r7, #12]
 804223e:	f000 f8e2 	bl	8042406 <UART_WaitOnFlagUntilTimeout>
 8042242:	4603      	mov	r3, r0
 8042244:	2b00      	cmp	r3, #0
 8042246:	d001      	beq.n	804224c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8042248:	2303      	movs	r3, #3
 804224a:	e036      	b.n	80422ba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 804224c:	69fb      	ldr	r3, [r7, #28]
 804224e:	2b00      	cmp	r3, #0
 8042250:	d10b      	bne.n	804226a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8042252:	69bb      	ldr	r3, [r7, #24]
 8042254:	881b      	ldrh	r3, [r3, #0]
 8042256:	461a      	mov	r2, r3
 8042258:	68fb      	ldr	r3, [r7, #12]
 804225a:	681b      	ldr	r3, [r3, #0]
 804225c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8042260:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8042262:	69bb      	ldr	r3, [r7, #24]
 8042264:	3302      	adds	r3, #2
 8042266:	61bb      	str	r3, [r7, #24]
 8042268:	e007      	b.n	804227a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 804226a:	69fb      	ldr	r3, [r7, #28]
 804226c:	781a      	ldrb	r2, [r3, #0]
 804226e:	68fb      	ldr	r3, [r7, #12]
 8042270:	681b      	ldr	r3, [r3, #0]
 8042272:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8042274:	69fb      	ldr	r3, [r7, #28]
 8042276:	3301      	adds	r3, #1
 8042278:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 804227a:	68fb      	ldr	r3, [r7, #12]
 804227c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 804227e:	b29b      	uxth	r3, r3
 8042280:	3b01      	subs	r3, #1
 8042282:	b29a      	uxth	r2, r3
 8042284:	68fb      	ldr	r3, [r7, #12]
 8042286:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8042288:	68fb      	ldr	r3, [r7, #12]
 804228a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 804228c:	b29b      	uxth	r3, r3
 804228e:	2b00      	cmp	r3, #0
 8042290:	d1cf      	bne.n	8042232 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8042292:	683b      	ldr	r3, [r7, #0]
 8042294:	9300      	str	r3, [sp, #0]
 8042296:	697b      	ldr	r3, [r7, #20]
 8042298:	2200      	movs	r2, #0
 804229a:	2140      	movs	r1, #64	; 0x40
 804229c:	68f8      	ldr	r0, [r7, #12]
 804229e:	f000 f8b2 	bl	8042406 <UART_WaitOnFlagUntilTimeout>
 80422a2:	4603      	mov	r3, r0
 80422a4:	2b00      	cmp	r3, #0
 80422a6:	d001      	beq.n	80422ac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80422a8:	2303      	movs	r3, #3
 80422aa:	e006      	b.n	80422ba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80422ac:	68fb      	ldr	r3, [r7, #12]
 80422ae:	2220      	movs	r2, #32
 80422b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80422b4:	2300      	movs	r3, #0
 80422b6:	e000      	b.n	80422ba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80422b8:	2302      	movs	r3, #2
  }
}
 80422ba:	4618      	mov	r0, r3
 80422bc:	3720      	adds	r7, #32
 80422be:	46bd      	mov	sp, r7
 80422c0:	bd80      	pop	{r7, pc}

080422c2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80422c2:	b580      	push	{r7, lr}
 80422c4:	b08a      	sub	sp, #40	; 0x28
 80422c6:	af02      	add	r7, sp, #8
 80422c8:	60f8      	str	r0, [r7, #12]
 80422ca:	60b9      	str	r1, [r7, #8]
 80422cc:	603b      	str	r3, [r7, #0]
 80422ce:	4613      	mov	r3, r2
 80422d0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80422d2:	2300      	movs	r3, #0
 80422d4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80422d6:	68fb      	ldr	r3, [r7, #12]
 80422d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80422dc:	b2db      	uxtb	r3, r3
 80422de:	2b20      	cmp	r3, #32
 80422e0:	f040 808c 	bne.w	80423fc <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80422e4:	68bb      	ldr	r3, [r7, #8]
 80422e6:	2b00      	cmp	r3, #0
 80422e8:	d002      	beq.n	80422f0 <HAL_UART_Receive+0x2e>
 80422ea:	88fb      	ldrh	r3, [r7, #6]
 80422ec:	2b00      	cmp	r3, #0
 80422ee:	d101      	bne.n	80422f4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80422f0:	2301      	movs	r3, #1
 80422f2:	e084      	b.n	80423fe <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80422f4:	68fb      	ldr	r3, [r7, #12]
 80422f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80422fa:	2b01      	cmp	r3, #1
 80422fc:	d101      	bne.n	8042302 <HAL_UART_Receive+0x40>
 80422fe:	2302      	movs	r3, #2
 8042300:	e07d      	b.n	80423fe <HAL_UART_Receive+0x13c>
 8042302:	68fb      	ldr	r3, [r7, #12]
 8042304:	2201      	movs	r2, #1
 8042306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 804230a:	68fb      	ldr	r3, [r7, #12]
 804230c:	2200      	movs	r2, #0
 804230e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8042310:	68fb      	ldr	r3, [r7, #12]
 8042312:	2222      	movs	r2, #34	; 0x22
 8042314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8042318:	68fb      	ldr	r3, [r7, #12]
 804231a:	2200      	movs	r2, #0
 804231c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 804231e:	f7fe fbf1 	bl	8040b04 <HAL_GetTick>
 8042322:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8042324:	68fb      	ldr	r3, [r7, #12]
 8042326:	88fa      	ldrh	r2, [r7, #6]
 8042328:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 804232a:	68fb      	ldr	r3, [r7, #12]
 804232c:	88fa      	ldrh	r2, [r7, #6]
 804232e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8042330:	68fb      	ldr	r3, [r7, #12]
 8042332:	689b      	ldr	r3, [r3, #8]
 8042334:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8042338:	d108      	bne.n	804234c <HAL_UART_Receive+0x8a>
 804233a:	68fb      	ldr	r3, [r7, #12]
 804233c:	691b      	ldr	r3, [r3, #16]
 804233e:	2b00      	cmp	r3, #0
 8042340:	d104      	bne.n	804234c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8042342:	2300      	movs	r3, #0
 8042344:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8042346:	68bb      	ldr	r3, [r7, #8]
 8042348:	61bb      	str	r3, [r7, #24]
 804234a:	e003      	b.n	8042354 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 804234c:	68bb      	ldr	r3, [r7, #8]
 804234e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8042350:	2300      	movs	r3, #0
 8042352:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8042354:	68fb      	ldr	r3, [r7, #12]
 8042356:	2200      	movs	r2, #0
 8042358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 804235c:	e043      	b.n	80423e6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 804235e:	683b      	ldr	r3, [r7, #0]
 8042360:	9300      	str	r3, [sp, #0]
 8042362:	697b      	ldr	r3, [r7, #20]
 8042364:	2200      	movs	r2, #0
 8042366:	2120      	movs	r1, #32
 8042368:	68f8      	ldr	r0, [r7, #12]
 804236a:	f000 f84c 	bl	8042406 <UART_WaitOnFlagUntilTimeout>
 804236e:	4603      	mov	r3, r0
 8042370:	2b00      	cmp	r3, #0
 8042372:	d001      	beq.n	8042378 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8042374:	2303      	movs	r3, #3
 8042376:	e042      	b.n	80423fe <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8042378:	69fb      	ldr	r3, [r7, #28]
 804237a:	2b00      	cmp	r3, #0
 804237c:	d10c      	bne.n	8042398 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 804237e:	68fb      	ldr	r3, [r7, #12]
 8042380:	681b      	ldr	r3, [r3, #0]
 8042382:	685b      	ldr	r3, [r3, #4]
 8042384:	b29b      	uxth	r3, r3
 8042386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 804238a:	b29a      	uxth	r2, r3
 804238c:	69bb      	ldr	r3, [r7, #24]
 804238e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8042390:	69bb      	ldr	r3, [r7, #24]
 8042392:	3302      	adds	r3, #2
 8042394:	61bb      	str	r3, [r7, #24]
 8042396:	e01f      	b.n	80423d8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8042398:	68fb      	ldr	r3, [r7, #12]
 804239a:	689b      	ldr	r3, [r3, #8]
 804239c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80423a0:	d007      	beq.n	80423b2 <HAL_UART_Receive+0xf0>
 80423a2:	68fb      	ldr	r3, [r7, #12]
 80423a4:	689b      	ldr	r3, [r3, #8]
 80423a6:	2b00      	cmp	r3, #0
 80423a8:	d10a      	bne.n	80423c0 <HAL_UART_Receive+0xfe>
 80423aa:	68fb      	ldr	r3, [r7, #12]
 80423ac:	691b      	ldr	r3, [r3, #16]
 80423ae:	2b00      	cmp	r3, #0
 80423b0:	d106      	bne.n	80423c0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80423b2:	68fb      	ldr	r3, [r7, #12]
 80423b4:	681b      	ldr	r3, [r3, #0]
 80423b6:	685b      	ldr	r3, [r3, #4]
 80423b8:	b2da      	uxtb	r2, r3
 80423ba:	69fb      	ldr	r3, [r7, #28]
 80423bc:	701a      	strb	r2, [r3, #0]
 80423be:	e008      	b.n	80423d2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80423c0:	68fb      	ldr	r3, [r7, #12]
 80423c2:	681b      	ldr	r3, [r3, #0]
 80423c4:	685b      	ldr	r3, [r3, #4]
 80423c6:	b2db      	uxtb	r3, r3
 80423c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80423cc:	b2da      	uxtb	r2, r3
 80423ce:	69fb      	ldr	r3, [r7, #28]
 80423d0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80423d2:	69fb      	ldr	r3, [r7, #28]
 80423d4:	3301      	adds	r3, #1
 80423d6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80423d8:	68fb      	ldr	r3, [r7, #12]
 80423da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80423dc:	b29b      	uxth	r3, r3
 80423de:	3b01      	subs	r3, #1
 80423e0:	b29a      	uxth	r2, r3
 80423e2:	68fb      	ldr	r3, [r7, #12]
 80423e4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80423e6:	68fb      	ldr	r3, [r7, #12]
 80423e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80423ea:	b29b      	uxth	r3, r3
 80423ec:	2b00      	cmp	r3, #0
 80423ee:	d1b6      	bne.n	804235e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80423f0:	68fb      	ldr	r3, [r7, #12]
 80423f2:	2220      	movs	r2, #32
 80423f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80423f8:	2300      	movs	r3, #0
 80423fa:	e000      	b.n	80423fe <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80423fc:	2302      	movs	r3, #2
  }
}
 80423fe:	4618      	mov	r0, r3
 8042400:	3720      	adds	r7, #32
 8042402:	46bd      	mov	sp, r7
 8042404:	bd80      	pop	{r7, pc}

08042406 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8042406:	b580      	push	{r7, lr}
 8042408:	b090      	sub	sp, #64	; 0x40
 804240a:	af00      	add	r7, sp, #0
 804240c:	60f8      	str	r0, [r7, #12]
 804240e:	60b9      	str	r1, [r7, #8]
 8042410:	603b      	str	r3, [r7, #0]
 8042412:	4613      	mov	r3, r2
 8042414:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8042416:	e050      	b.n	80424ba <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8042418:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 804241a:	f1b3 3fff 	cmp.w	r3, #4294967295
 804241e:	d04c      	beq.n	80424ba <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8042420:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8042422:	2b00      	cmp	r3, #0
 8042424:	d007      	beq.n	8042436 <UART_WaitOnFlagUntilTimeout+0x30>
 8042426:	f7fe fb6d 	bl	8040b04 <HAL_GetTick>
 804242a:	4602      	mov	r2, r0
 804242c:	683b      	ldr	r3, [r7, #0]
 804242e:	1ad3      	subs	r3, r2, r3
 8042430:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8042432:	429a      	cmp	r2, r3
 8042434:	d241      	bcs.n	80424ba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8042436:	68fb      	ldr	r3, [r7, #12]
 8042438:	681b      	ldr	r3, [r3, #0]
 804243a:	330c      	adds	r3, #12
 804243c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 804243e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8042440:	e853 3f00 	ldrex	r3, [r3]
 8042444:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8042446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8042448:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 804244c:	63fb      	str	r3, [r7, #60]	; 0x3c
 804244e:	68fb      	ldr	r3, [r7, #12]
 8042450:	681b      	ldr	r3, [r3, #0]
 8042452:	330c      	adds	r3, #12
 8042454:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8042456:	637a      	str	r2, [r7, #52]	; 0x34
 8042458:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 804245a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 804245c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 804245e:	e841 2300 	strex	r3, r2, [r1]
 8042462:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8042464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8042466:	2b00      	cmp	r3, #0
 8042468:	d1e5      	bne.n	8042436 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 804246a:	68fb      	ldr	r3, [r7, #12]
 804246c:	681b      	ldr	r3, [r3, #0]
 804246e:	3314      	adds	r3, #20
 8042470:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8042472:	697b      	ldr	r3, [r7, #20]
 8042474:	e853 3f00 	ldrex	r3, [r3]
 8042478:	613b      	str	r3, [r7, #16]
   return(result);
 804247a:	693b      	ldr	r3, [r7, #16]
 804247c:	f023 0301 	bic.w	r3, r3, #1
 8042480:	63bb      	str	r3, [r7, #56]	; 0x38
 8042482:	68fb      	ldr	r3, [r7, #12]
 8042484:	681b      	ldr	r3, [r3, #0]
 8042486:	3314      	adds	r3, #20
 8042488:	6bba      	ldr	r2, [r7, #56]	; 0x38
 804248a:	623a      	str	r2, [r7, #32]
 804248c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 804248e:	69f9      	ldr	r1, [r7, #28]
 8042490:	6a3a      	ldr	r2, [r7, #32]
 8042492:	e841 2300 	strex	r3, r2, [r1]
 8042496:	61bb      	str	r3, [r7, #24]
   return(result);
 8042498:	69bb      	ldr	r3, [r7, #24]
 804249a:	2b00      	cmp	r3, #0
 804249c:	d1e5      	bne.n	804246a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 804249e:	68fb      	ldr	r3, [r7, #12]
 80424a0:	2220      	movs	r2, #32
 80424a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80424a6:	68fb      	ldr	r3, [r7, #12]
 80424a8:	2220      	movs	r2, #32
 80424aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80424ae:	68fb      	ldr	r3, [r7, #12]
 80424b0:	2200      	movs	r2, #0
 80424b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80424b6:	2303      	movs	r3, #3
 80424b8:	e00f      	b.n	80424da <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80424ba:	68fb      	ldr	r3, [r7, #12]
 80424bc:	681b      	ldr	r3, [r3, #0]
 80424be:	681a      	ldr	r2, [r3, #0]
 80424c0:	68bb      	ldr	r3, [r7, #8]
 80424c2:	4013      	ands	r3, r2
 80424c4:	68ba      	ldr	r2, [r7, #8]
 80424c6:	429a      	cmp	r2, r3
 80424c8:	bf0c      	ite	eq
 80424ca:	2301      	moveq	r3, #1
 80424cc:	2300      	movne	r3, #0
 80424ce:	b2db      	uxtb	r3, r3
 80424d0:	461a      	mov	r2, r3
 80424d2:	79fb      	ldrb	r3, [r7, #7]
 80424d4:	429a      	cmp	r2, r3
 80424d6:	d09f      	beq.n	8042418 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80424d8:	2300      	movs	r3, #0
}
 80424da:	4618      	mov	r0, r3
 80424dc:	3740      	adds	r7, #64	; 0x40
 80424de:	46bd      	mov	sp, r7
 80424e0:	bd80      	pop	{r7, pc}
	...

080424e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80424e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80424e8:	b0c0      	sub	sp, #256	; 0x100
 80424ea:	af00      	add	r7, sp, #0
 80424ec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80424f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80424f4:	681b      	ldr	r3, [r3, #0]
 80424f6:	691b      	ldr	r3, [r3, #16]
 80424f8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80424fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8042500:	68d9      	ldr	r1, [r3, #12]
 8042502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8042506:	681a      	ldr	r2, [r3, #0]
 8042508:	ea40 0301 	orr.w	r3, r0, r1
 804250c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 804250e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8042512:	689a      	ldr	r2, [r3, #8]
 8042514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8042518:	691b      	ldr	r3, [r3, #16]
 804251a:	431a      	orrs	r2, r3
 804251c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8042520:	695b      	ldr	r3, [r3, #20]
 8042522:	431a      	orrs	r2, r3
 8042524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8042528:	69db      	ldr	r3, [r3, #28]
 804252a:	4313      	orrs	r3, r2
 804252c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8042530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8042534:	681b      	ldr	r3, [r3, #0]
 8042536:	68db      	ldr	r3, [r3, #12]
 8042538:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 804253c:	f021 010c 	bic.w	r1, r1, #12
 8042540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8042544:	681a      	ldr	r2, [r3, #0]
 8042546:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 804254a:	430b      	orrs	r3, r1
 804254c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 804254e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8042552:	681b      	ldr	r3, [r3, #0]
 8042554:	695b      	ldr	r3, [r3, #20]
 8042556:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 804255a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 804255e:	6999      	ldr	r1, [r3, #24]
 8042560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8042564:	681a      	ldr	r2, [r3, #0]
 8042566:	ea40 0301 	orr.w	r3, r0, r1
 804256a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 804256c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8042570:	681a      	ldr	r2, [r3, #0]
 8042572:	4b8f      	ldr	r3, [pc, #572]	; (80427b0 <UART_SetConfig+0x2cc>)
 8042574:	429a      	cmp	r2, r3
 8042576:	d005      	beq.n	8042584 <UART_SetConfig+0xa0>
 8042578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 804257c:	681a      	ldr	r2, [r3, #0]
 804257e:	4b8d      	ldr	r3, [pc, #564]	; (80427b4 <UART_SetConfig+0x2d0>)
 8042580:	429a      	cmp	r2, r3
 8042582:	d104      	bne.n	804258e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8042584:	f7ff fcdc 	bl	8041f40 <HAL_RCC_GetPCLK2Freq>
 8042588:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 804258c:	e003      	b.n	8042596 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 804258e:	f7ff fcc3 	bl	8041f18 <HAL_RCC_GetPCLK1Freq>
 8042592:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8042596:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 804259a:	69db      	ldr	r3, [r3, #28]
 804259c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80425a0:	f040 810c 	bne.w	80427bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80425a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80425a8:	2200      	movs	r2, #0
 80425aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80425ae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80425b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80425b6:	4622      	mov	r2, r4
 80425b8:	462b      	mov	r3, r5
 80425ba:	1891      	adds	r1, r2, r2
 80425bc:	65b9      	str	r1, [r7, #88]	; 0x58
 80425be:	415b      	adcs	r3, r3
 80425c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80425c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80425c6:	4621      	mov	r1, r4
 80425c8:	eb12 0801 	adds.w	r8, r2, r1
 80425cc:	4629      	mov	r1, r5
 80425ce:	eb43 0901 	adc.w	r9, r3, r1
 80425d2:	f04f 0200 	mov.w	r2, #0
 80425d6:	f04f 0300 	mov.w	r3, #0
 80425da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80425de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80425e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80425e6:	4690      	mov	r8, r2
 80425e8:	4699      	mov	r9, r3
 80425ea:	4623      	mov	r3, r4
 80425ec:	eb18 0303 	adds.w	r3, r8, r3
 80425f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80425f4:	462b      	mov	r3, r5
 80425f6:	eb49 0303 	adc.w	r3, r9, r3
 80425fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80425fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8042602:	685b      	ldr	r3, [r3, #4]
 8042604:	2200      	movs	r2, #0
 8042606:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 804260a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 804260e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8042612:	460b      	mov	r3, r1
 8042614:	18db      	adds	r3, r3, r3
 8042616:	653b      	str	r3, [r7, #80]	; 0x50
 8042618:	4613      	mov	r3, r2
 804261a:	eb42 0303 	adc.w	r3, r2, r3
 804261e:	657b      	str	r3, [r7, #84]	; 0x54
 8042620:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8042624:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8042628:	f7fd fdd6 	bl	80401d8 <__aeabi_uldivmod>
 804262c:	4602      	mov	r2, r0
 804262e:	460b      	mov	r3, r1
 8042630:	4b61      	ldr	r3, [pc, #388]	; (80427b8 <UART_SetConfig+0x2d4>)
 8042632:	fba3 2302 	umull	r2, r3, r3, r2
 8042636:	095b      	lsrs	r3, r3, #5
 8042638:	011c      	lsls	r4, r3, #4
 804263a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 804263e:	2200      	movs	r2, #0
 8042640:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8042644:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8042648:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 804264c:	4642      	mov	r2, r8
 804264e:	464b      	mov	r3, r9
 8042650:	1891      	adds	r1, r2, r2
 8042652:	64b9      	str	r1, [r7, #72]	; 0x48
 8042654:	415b      	adcs	r3, r3
 8042656:	64fb      	str	r3, [r7, #76]	; 0x4c
 8042658:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 804265c:	4641      	mov	r1, r8
 804265e:	eb12 0a01 	adds.w	sl, r2, r1
 8042662:	4649      	mov	r1, r9
 8042664:	eb43 0b01 	adc.w	fp, r3, r1
 8042668:	f04f 0200 	mov.w	r2, #0
 804266c:	f04f 0300 	mov.w	r3, #0
 8042670:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8042674:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8042678:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 804267c:	4692      	mov	sl, r2
 804267e:	469b      	mov	fp, r3
 8042680:	4643      	mov	r3, r8
 8042682:	eb1a 0303 	adds.w	r3, sl, r3
 8042686:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 804268a:	464b      	mov	r3, r9
 804268c:	eb4b 0303 	adc.w	r3, fp, r3
 8042690:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8042694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8042698:	685b      	ldr	r3, [r3, #4]
 804269a:	2200      	movs	r2, #0
 804269c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80426a0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80426a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80426a8:	460b      	mov	r3, r1
 80426aa:	18db      	adds	r3, r3, r3
 80426ac:	643b      	str	r3, [r7, #64]	; 0x40
 80426ae:	4613      	mov	r3, r2
 80426b0:	eb42 0303 	adc.w	r3, r2, r3
 80426b4:	647b      	str	r3, [r7, #68]	; 0x44
 80426b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80426ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80426be:	f7fd fd8b 	bl	80401d8 <__aeabi_uldivmod>
 80426c2:	4602      	mov	r2, r0
 80426c4:	460b      	mov	r3, r1
 80426c6:	4611      	mov	r1, r2
 80426c8:	4b3b      	ldr	r3, [pc, #236]	; (80427b8 <UART_SetConfig+0x2d4>)
 80426ca:	fba3 2301 	umull	r2, r3, r3, r1
 80426ce:	095b      	lsrs	r3, r3, #5
 80426d0:	2264      	movs	r2, #100	; 0x64
 80426d2:	fb02 f303 	mul.w	r3, r2, r3
 80426d6:	1acb      	subs	r3, r1, r3
 80426d8:	00db      	lsls	r3, r3, #3
 80426da:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80426de:	4b36      	ldr	r3, [pc, #216]	; (80427b8 <UART_SetConfig+0x2d4>)
 80426e0:	fba3 2302 	umull	r2, r3, r3, r2
 80426e4:	095b      	lsrs	r3, r3, #5
 80426e6:	005b      	lsls	r3, r3, #1
 80426e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80426ec:	441c      	add	r4, r3
 80426ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80426f2:	2200      	movs	r2, #0
 80426f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80426f8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80426fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8042700:	4642      	mov	r2, r8
 8042702:	464b      	mov	r3, r9
 8042704:	1891      	adds	r1, r2, r2
 8042706:	63b9      	str	r1, [r7, #56]	; 0x38
 8042708:	415b      	adcs	r3, r3
 804270a:	63fb      	str	r3, [r7, #60]	; 0x3c
 804270c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8042710:	4641      	mov	r1, r8
 8042712:	1851      	adds	r1, r2, r1
 8042714:	6339      	str	r1, [r7, #48]	; 0x30
 8042716:	4649      	mov	r1, r9
 8042718:	414b      	adcs	r3, r1
 804271a:	637b      	str	r3, [r7, #52]	; 0x34
 804271c:	f04f 0200 	mov.w	r2, #0
 8042720:	f04f 0300 	mov.w	r3, #0
 8042724:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8042728:	4659      	mov	r1, fp
 804272a:	00cb      	lsls	r3, r1, #3
 804272c:	4651      	mov	r1, sl
 804272e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8042732:	4651      	mov	r1, sl
 8042734:	00ca      	lsls	r2, r1, #3
 8042736:	4610      	mov	r0, r2
 8042738:	4619      	mov	r1, r3
 804273a:	4603      	mov	r3, r0
 804273c:	4642      	mov	r2, r8
 804273e:	189b      	adds	r3, r3, r2
 8042740:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8042744:	464b      	mov	r3, r9
 8042746:	460a      	mov	r2, r1
 8042748:	eb42 0303 	adc.w	r3, r2, r3
 804274c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8042750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8042754:	685b      	ldr	r3, [r3, #4]
 8042756:	2200      	movs	r2, #0
 8042758:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 804275c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8042760:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8042764:	460b      	mov	r3, r1
 8042766:	18db      	adds	r3, r3, r3
 8042768:	62bb      	str	r3, [r7, #40]	; 0x28
 804276a:	4613      	mov	r3, r2
 804276c:	eb42 0303 	adc.w	r3, r2, r3
 8042770:	62fb      	str	r3, [r7, #44]	; 0x2c
 8042772:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8042776:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 804277a:	f7fd fd2d 	bl	80401d8 <__aeabi_uldivmod>
 804277e:	4602      	mov	r2, r0
 8042780:	460b      	mov	r3, r1
 8042782:	4b0d      	ldr	r3, [pc, #52]	; (80427b8 <UART_SetConfig+0x2d4>)
 8042784:	fba3 1302 	umull	r1, r3, r3, r2
 8042788:	095b      	lsrs	r3, r3, #5
 804278a:	2164      	movs	r1, #100	; 0x64
 804278c:	fb01 f303 	mul.w	r3, r1, r3
 8042790:	1ad3      	subs	r3, r2, r3
 8042792:	00db      	lsls	r3, r3, #3
 8042794:	3332      	adds	r3, #50	; 0x32
 8042796:	4a08      	ldr	r2, [pc, #32]	; (80427b8 <UART_SetConfig+0x2d4>)
 8042798:	fba2 2303 	umull	r2, r3, r2, r3
 804279c:	095b      	lsrs	r3, r3, #5
 804279e:	f003 0207 	and.w	r2, r3, #7
 80427a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80427a6:	681b      	ldr	r3, [r3, #0]
 80427a8:	4422      	add	r2, r4
 80427aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80427ac:	e105      	b.n	80429ba <UART_SetConfig+0x4d6>
 80427ae:	bf00      	nop
 80427b0:	40011000 	.word	0x40011000
 80427b4:	40011400 	.word	0x40011400
 80427b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80427bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80427c0:	2200      	movs	r2, #0
 80427c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80427c6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80427ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80427ce:	4642      	mov	r2, r8
 80427d0:	464b      	mov	r3, r9
 80427d2:	1891      	adds	r1, r2, r2
 80427d4:	6239      	str	r1, [r7, #32]
 80427d6:	415b      	adcs	r3, r3
 80427d8:	627b      	str	r3, [r7, #36]	; 0x24
 80427da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80427de:	4641      	mov	r1, r8
 80427e0:	1854      	adds	r4, r2, r1
 80427e2:	4649      	mov	r1, r9
 80427e4:	eb43 0501 	adc.w	r5, r3, r1
 80427e8:	f04f 0200 	mov.w	r2, #0
 80427ec:	f04f 0300 	mov.w	r3, #0
 80427f0:	00eb      	lsls	r3, r5, #3
 80427f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80427f6:	00e2      	lsls	r2, r4, #3
 80427f8:	4614      	mov	r4, r2
 80427fa:	461d      	mov	r5, r3
 80427fc:	4643      	mov	r3, r8
 80427fe:	18e3      	adds	r3, r4, r3
 8042800:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8042804:	464b      	mov	r3, r9
 8042806:	eb45 0303 	adc.w	r3, r5, r3
 804280a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 804280e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8042812:	685b      	ldr	r3, [r3, #4]
 8042814:	2200      	movs	r2, #0
 8042816:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 804281a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 804281e:	f04f 0200 	mov.w	r2, #0
 8042822:	f04f 0300 	mov.w	r3, #0
 8042826:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 804282a:	4629      	mov	r1, r5
 804282c:	008b      	lsls	r3, r1, #2
 804282e:	4621      	mov	r1, r4
 8042830:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8042834:	4621      	mov	r1, r4
 8042836:	008a      	lsls	r2, r1, #2
 8042838:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 804283c:	f7fd fccc 	bl	80401d8 <__aeabi_uldivmod>
 8042840:	4602      	mov	r2, r0
 8042842:	460b      	mov	r3, r1
 8042844:	4b60      	ldr	r3, [pc, #384]	; (80429c8 <UART_SetConfig+0x4e4>)
 8042846:	fba3 2302 	umull	r2, r3, r3, r2
 804284a:	095b      	lsrs	r3, r3, #5
 804284c:	011c      	lsls	r4, r3, #4
 804284e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8042852:	2200      	movs	r2, #0
 8042854:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8042858:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 804285c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8042860:	4642      	mov	r2, r8
 8042862:	464b      	mov	r3, r9
 8042864:	1891      	adds	r1, r2, r2
 8042866:	61b9      	str	r1, [r7, #24]
 8042868:	415b      	adcs	r3, r3
 804286a:	61fb      	str	r3, [r7, #28]
 804286c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8042870:	4641      	mov	r1, r8
 8042872:	1851      	adds	r1, r2, r1
 8042874:	6139      	str	r1, [r7, #16]
 8042876:	4649      	mov	r1, r9
 8042878:	414b      	adcs	r3, r1
 804287a:	617b      	str	r3, [r7, #20]
 804287c:	f04f 0200 	mov.w	r2, #0
 8042880:	f04f 0300 	mov.w	r3, #0
 8042884:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8042888:	4659      	mov	r1, fp
 804288a:	00cb      	lsls	r3, r1, #3
 804288c:	4651      	mov	r1, sl
 804288e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8042892:	4651      	mov	r1, sl
 8042894:	00ca      	lsls	r2, r1, #3
 8042896:	4610      	mov	r0, r2
 8042898:	4619      	mov	r1, r3
 804289a:	4603      	mov	r3, r0
 804289c:	4642      	mov	r2, r8
 804289e:	189b      	adds	r3, r3, r2
 80428a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80428a4:	464b      	mov	r3, r9
 80428a6:	460a      	mov	r2, r1
 80428a8:	eb42 0303 	adc.w	r3, r2, r3
 80428ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80428b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80428b4:	685b      	ldr	r3, [r3, #4]
 80428b6:	2200      	movs	r2, #0
 80428b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80428ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 80428bc:	f04f 0200 	mov.w	r2, #0
 80428c0:	f04f 0300 	mov.w	r3, #0
 80428c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80428c8:	4649      	mov	r1, r9
 80428ca:	008b      	lsls	r3, r1, #2
 80428cc:	4641      	mov	r1, r8
 80428ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80428d2:	4641      	mov	r1, r8
 80428d4:	008a      	lsls	r2, r1, #2
 80428d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80428da:	f7fd fc7d 	bl	80401d8 <__aeabi_uldivmod>
 80428de:	4602      	mov	r2, r0
 80428e0:	460b      	mov	r3, r1
 80428e2:	4b39      	ldr	r3, [pc, #228]	; (80429c8 <UART_SetConfig+0x4e4>)
 80428e4:	fba3 1302 	umull	r1, r3, r3, r2
 80428e8:	095b      	lsrs	r3, r3, #5
 80428ea:	2164      	movs	r1, #100	; 0x64
 80428ec:	fb01 f303 	mul.w	r3, r1, r3
 80428f0:	1ad3      	subs	r3, r2, r3
 80428f2:	011b      	lsls	r3, r3, #4
 80428f4:	3332      	adds	r3, #50	; 0x32
 80428f6:	4a34      	ldr	r2, [pc, #208]	; (80429c8 <UART_SetConfig+0x4e4>)
 80428f8:	fba2 2303 	umull	r2, r3, r2, r3
 80428fc:	095b      	lsrs	r3, r3, #5
 80428fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8042902:	441c      	add	r4, r3
 8042904:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8042908:	2200      	movs	r2, #0
 804290a:	673b      	str	r3, [r7, #112]	; 0x70
 804290c:	677a      	str	r2, [r7, #116]	; 0x74
 804290e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8042912:	4642      	mov	r2, r8
 8042914:	464b      	mov	r3, r9
 8042916:	1891      	adds	r1, r2, r2
 8042918:	60b9      	str	r1, [r7, #8]
 804291a:	415b      	adcs	r3, r3
 804291c:	60fb      	str	r3, [r7, #12]
 804291e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8042922:	4641      	mov	r1, r8
 8042924:	1851      	adds	r1, r2, r1
 8042926:	6039      	str	r1, [r7, #0]
 8042928:	4649      	mov	r1, r9
 804292a:	414b      	adcs	r3, r1
 804292c:	607b      	str	r3, [r7, #4]
 804292e:	f04f 0200 	mov.w	r2, #0
 8042932:	f04f 0300 	mov.w	r3, #0
 8042936:	e9d7 ab00 	ldrd	sl, fp, [r7]
 804293a:	4659      	mov	r1, fp
 804293c:	00cb      	lsls	r3, r1, #3
 804293e:	4651      	mov	r1, sl
 8042940:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8042944:	4651      	mov	r1, sl
 8042946:	00ca      	lsls	r2, r1, #3
 8042948:	4610      	mov	r0, r2
 804294a:	4619      	mov	r1, r3
 804294c:	4603      	mov	r3, r0
 804294e:	4642      	mov	r2, r8
 8042950:	189b      	adds	r3, r3, r2
 8042952:	66bb      	str	r3, [r7, #104]	; 0x68
 8042954:	464b      	mov	r3, r9
 8042956:	460a      	mov	r2, r1
 8042958:	eb42 0303 	adc.w	r3, r2, r3
 804295c:	66fb      	str	r3, [r7, #108]	; 0x6c
 804295e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8042962:	685b      	ldr	r3, [r3, #4]
 8042964:	2200      	movs	r2, #0
 8042966:	663b      	str	r3, [r7, #96]	; 0x60
 8042968:	667a      	str	r2, [r7, #100]	; 0x64
 804296a:	f04f 0200 	mov.w	r2, #0
 804296e:	f04f 0300 	mov.w	r3, #0
 8042972:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8042976:	4649      	mov	r1, r9
 8042978:	008b      	lsls	r3, r1, #2
 804297a:	4641      	mov	r1, r8
 804297c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8042980:	4641      	mov	r1, r8
 8042982:	008a      	lsls	r2, r1, #2
 8042984:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8042988:	f7fd fc26 	bl	80401d8 <__aeabi_uldivmod>
 804298c:	4602      	mov	r2, r0
 804298e:	460b      	mov	r3, r1
 8042990:	4b0d      	ldr	r3, [pc, #52]	; (80429c8 <UART_SetConfig+0x4e4>)
 8042992:	fba3 1302 	umull	r1, r3, r3, r2
 8042996:	095b      	lsrs	r3, r3, #5
 8042998:	2164      	movs	r1, #100	; 0x64
 804299a:	fb01 f303 	mul.w	r3, r1, r3
 804299e:	1ad3      	subs	r3, r2, r3
 80429a0:	011b      	lsls	r3, r3, #4
 80429a2:	3332      	adds	r3, #50	; 0x32
 80429a4:	4a08      	ldr	r2, [pc, #32]	; (80429c8 <UART_SetConfig+0x4e4>)
 80429a6:	fba2 2303 	umull	r2, r3, r2, r3
 80429aa:	095b      	lsrs	r3, r3, #5
 80429ac:	f003 020f 	and.w	r2, r3, #15
 80429b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80429b4:	681b      	ldr	r3, [r3, #0]
 80429b6:	4422      	add	r2, r4
 80429b8:	609a      	str	r2, [r3, #8]
}
 80429ba:	bf00      	nop
 80429bc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80429c0:	46bd      	mov	sp, r7
 80429c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80429c6:	bf00      	nop
 80429c8:	51eb851f 	.word	0x51eb851f

080429cc <__libc_init_array>:
 80429cc:	b570      	push	{r4, r5, r6, lr}
 80429ce:	4d0d      	ldr	r5, [pc, #52]	; (8042a04 <__libc_init_array+0x38>)
 80429d0:	4c0d      	ldr	r4, [pc, #52]	; (8042a08 <__libc_init_array+0x3c>)
 80429d2:	1b64      	subs	r4, r4, r5
 80429d4:	10a4      	asrs	r4, r4, #2
 80429d6:	2600      	movs	r6, #0
 80429d8:	42a6      	cmp	r6, r4
 80429da:	d109      	bne.n	80429f0 <__libc_init_array+0x24>
 80429dc:	4d0b      	ldr	r5, [pc, #44]	; (8042a0c <__libc_init_array+0x40>)
 80429de:	4c0c      	ldr	r4, [pc, #48]	; (8042a10 <__libc_init_array+0x44>)
 80429e0:	f000 f820 	bl	8042a24 <_init>
 80429e4:	1b64      	subs	r4, r4, r5
 80429e6:	10a4      	asrs	r4, r4, #2
 80429e8:	2600      	movs	r6, #0
 80429ea:	42a6      	cmp	r6, r4
 80429ec:	d105      	bne.n	80429fa <__libc_init_array+0x2e>
 80429ee:	bd70      	pop	{r4, r5, r6, pc}
 80429f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80429f4:	4798      	blx	r3
 80429f6:	3601      	adds	r6, #1
 80429f8:	e7ee      	b.n	80429d8 <__libc_init_array+0xc>
 80429fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80429fe:	4798      	blx	r3
 8042a00:	3601      	adds	r6, #1
 8042a02:	e7f2      	b.n	80429ea <__libc_init_array+0x1e>
 8042a04:	08042a5c 	.word	0x08042a5c
 8042a08:	08042a5c 	.word	0x08042a5c
 8042a0c:	08042a5c 	.word	0x08042a5c
 8042a10:	08042a60 	.word	0x08042a60

08042a14 <memset>:
 8042a14:	4402      	add	r2, r0
 8042a16:	4603      	mov	r3, r0
 8042a18:	4293      	cmp	r3, r2
 8042a1a:	d100      	bne.n	8042a1e <memset+0xa>
 8042a1c:	4770      	bx	lr
 8042a1e:	f803 1b01 	strb.w	r1, [r3], #1
 8042a22:	e7f9      	b.n	8042a18 <memset+0x4>

08042a24 <_init>:
 8042a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8042a26:	bf00      	nop
 8042a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8042a2a:	bc08      	pop	{r3}
 8042a2c:	469e      	mov	lr, r3
 8042a2e:	4770      	bx	lr

08042a30 <_fini>:
 8042a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8042a32:	bf00      	nop
 8042a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8042a36:	bc08      	pop	{r3}
 8042a38:	469e      	mov	lr, r3
 8042a3a:	4770      	bx	lr
